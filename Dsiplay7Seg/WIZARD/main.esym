F N "main" 0 3 ""
D G "__PCM__" 0 20 ""5.093""
D G "__DEVICE__" 0 20 "8855"
D G "__DATE__" 0 20 ""9-Aug-21""
D G "__TIME__" 0 20 ""20:24:38""
D G "_UNICODE" 0 20 ""?""
D G "__EVAL" 0 20 ""?"" "Standard Header file for the PIC16F18855 device ////////////////"
c L "set_tris_a" 2 3 25 "FUNCTION"
f N "set_tris_a" 2 68 ""
v L "value" 2 68 "int8" `55 
f B "set_tris_a" 2 68 "void(int8 value)" `54 
f N "set_tris_b" 2 69 ""
v L "value" 2 69 "int8" `57 
f B "set_tris_b" 2 69 "void(int8 value)" `56 
f N "set_tris_c" 2 70 ""
v L "value" 2 70 "int8" `59 
f B "set_tris_c" 2 70 "void(int8 value)" `58 
f N "set_tris_e" 2 71 ""
v L "value" 2 71 "int8" `61 
f B "set_tris_e" 2 71 "void(int8 value)" `60 
f N "set_input_level_a" 2 72 ""
v L "value" 2 72 "int8" `63 
f B "set_input_level_a" 2 72 "void(int8 value)" `62 
f N "set_input_level_b" 2 73 ""
v L "value" 2 73 "int8" `65 
f B "set_input_level_b" 2 73 "void(int8 value)" `64 
f N "set_input_level_c" 2 74 ""
v L "value" 2 74 "int8" `67 
f B "set_input_level_c" 2 74 "void(int8 value)" `66 
f N "set_input_level_e" 2 75 ""
v L "value" 2 75 "int8" `69 
f B "set_input_level_e" 2 75 "void(int8 value)" `68 
f N "set_open_drain_a" 2 76 ""
v L "value" 2 76 "int8" `71 
f B "set_open_drain_a" 2 76 "void(int8 value)" `70 
f N "set_open_drain_b" 2 77 ""
v L "value" 2 77 "int8" `73 
f B "set_open_drain_b" 2 77 "void(int8 value)" `72 
f N "set_open_drain_c" 2 78 ""
v L "value" 2 78 "int8" `75 
f B "set_open_drain_c" 2 78 "void(int8 value)" `74 
f N "get_tris_a" 2 79 ""
f B "get_tris_a" 2 79 "int8()" `76 
f N "get_tris_b" 2 80 ""
f B "get_tris_b" 2 80 "int8()" `77 
f N "get_tris_c" 2 81 ""
f B "get_tris_c" 2 81 "int8()" `78 
f N "get_tris_e" 2 82 ""
f B "get_tris_e" 2 82 "int8()" `79 
f N "output_a" 2 83 ""
v L "value" 2 83 "int8" `81 
f B "output_a" 2 83 "void(int8 value)" `80 
f N "output_b" 2 84 ""
v L "value" 2 84 "int8" `83 
f B "output_b" 2 84 "void(int8 value)" `82 
f N "output_c" 2 85 ""
v L "value" 2 85 "int8" `85 
f B "output_c" 2 85 "void(int8 value)" `84 
f N "output_e" 2 86 ""
v L "value" 2 86 "int8" `87 
f B "output_e" 2 86 "void(int8 value)" `86 
f N "input_a" 2 87 ""
f B "input_a" 2 87 "int8()" `88 
f N "input_b" 2 88 ""
f B "input_b" 2 88 "int8()" `89 
f N "input_c" 2 89 ""
f B "input_c" 2 89 "int8()" `90 
f N "input_e" 2 90 ""
f B "input_e" 2 90 "int8()" `91 
f N "input_change_a" 2 91 ""
f B "input_change_a" 2 91 "int8()" `92 
f N "input_change_b" 2 92 ""
f B "input_change_b" 2 92 "int8()" `93 
f N "input_change_c" 2 93 ""
f B "input_change_c" 2 93 "int8()" `94 
f N "input_change_e" 2 94 ""
f B "input_change_e" 2 94 "int8()" `95 
f N "port_a_pullups" 2 95 ""
v L "upmask" 2 95 "int8" `97 
f B "port_a_pullups" 2 95 "void(int8 upmask)" `96 
f N "port_b_pullups" 2 96 ""
v L "upmask" 2 96 "int8" `99 
f B "port_b_pullups" 2 96 "void(int8 upmask)" `98 
f N "port_c_pullups" 2 97 ""
v L "upmask" 2 97 "int8" `101 
f B "port_c_pullups" 2 97 "void(int8 upmask)" `100 
f N "port_e_pullups" 2 98 ""
v L "upmask" 2 98 "int8" `103 
f B "port_e_pullups" 2 98 "void(int8 upmask)" `102 
f N "set_slow_slew_a" 2 99 ""
v L "value" 2 99 "int8" `105 
f B "set_slow_slew_a" 2 99 "void(int8 value)" `104 
f N "set_slow_slew_b" 2 100 ""
v L "value" 2 100 "int8" `107 
f B "set_slow_slew_b" 2 100 "void(int8 value)" `106 
f N "set_slow_slew_c" 2 101 ""
v L "value" 2 101 "int8" `109 
f B "set_slow_slew_c" 2 101 "void(int8 value)" `108 
f N "input" 2 102 ""
v L "pin" 2 102 "int16" `111 
f B "input" 2 102 "int8(int16 pin)" `110 
f N "input_state" 2 103 ""
v L "pin" 2 103 "int16" `113 
f B "input_state" 2 103 "int8(int16 pin)" `112 
f N "output_low" 2 104 ""
v L "pin" 2 104 "int16" `115 
f B "output_low" 2 104 "void(int16 pin)" `114 
f N "output_high" 2 105 ""
v L "pin" 2 105 "int16" `117 
f B "output_high" 2 105 "void(int16 pin)" `116 
f N "output_toggle" 2 106 ""
v L "pin" 2 106 "int16" `119 
f B "output_toggle" 2 106 "void(int16 pin)" `118 
f N "output_bit" 2 107 ""
v L "pin" 2 107 "int16" `121 
v L "level" 2 107 "int8" `122 
f B "output_bit" 2 107 "void(int16 pin,int8 level)" `120 
f N "output_float" 2 108 ""
v L "pin" 2 108 "int16" `124 
f B "output_float" 2 108 "void(int16 pin)" `123 
f N "output_drive" 2 109 ""
v L "pin" 2 109 "int16" `126 
f B "output_drive" 2 109 "void(int16 pin)" `125  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 113 "96"
d G "PIN_A1" 2 114 "97"
d G "PIN_A2" 2 115 "98"
d G "PIN_A3" 2 116 "99"
d G "PIN_A4" 2 117 "100"
d G "PIN_A5" 2 118 "101"
d G "PIN_A6" 2 119 "102"
d G "PIN_A7" 2 120 "103"
d G "PIN_B0" 2 122 "104"
d G "PIN_B1" 2 123 "105"
d G "PIN_B2" 2 124 "106"
d G "PIN_B3" 2 125 "107"
d G "PIN_B4" 2 126 "108"
d G "PIN_B5" 2 127 "109"
d G "PIN_B6" 2 128 "110"
d G "PIN_B7" 2 129 "111"
d G "PIN_C0" 2 131 "112"
d G "PIN_C1" 2 132 "113"
d G "PIN_C2" 2 133 "114"
d G "PIN_C3" 2 134 "115"
d G "PIN_C4" 2 135 "116"
d G "PIN_C5" 2 136 "117"
d G "PIN_C6" 2 137 "118"
d G "PIN_C7" 2 138 "119"
d G "PIN_E3" 2 140 "131"
d G "FALSE" 2 143 "0"
d G "TRUE" 2 144 "1"
d G "BYTE" 2 146 "int8"
d G "BOOLEAN" 2 147 "int1"
d G "getc" 2 149 "getch"
d G "fgetc" 2 150 "getch"
d G "getchar" 2 151 "getch"
d G "putc" 2 152 "putchar"
d G "fputc" 2 153 "putchar"
d G "fgets" 2 154 "gets"
d G "fputs" 2 155 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 160 ""
f B "restart_cause" 2 160 "int16()" `127 
f N "reset_cpu" 2 161 ""
f B "reset_cpu" 2 161 "void()" `128 
f N "sleep" 2 162 ""
f B "sleep" 2 162 "void()" `129  "Constants returned from RESTART_CAUSE() are:"
d G "NORMAL_POWER_UP" 2 164 "0x33C"
d G "BROWNOUT_RESTART" 2 165 "0x33E"
d G "MCLR_FROM_SLEEP" 2 166 "0x237"
d G "WDT_TIMEOUT" 2 167 "0x12F"
d G "WDT_FROM_SLEEP" 2 168 "0x03F"
d G "INTERRUPT_FROM_SLEEP" 2 169 "0x23F"
d G "MCLR_FROM_RUN" 2 170 "0x337"
d G "RESET_INSTRUCTION" 2 171 "0x33B"
d G "STACK_OVERFLOW" 2 172 "0x3BF"
d G "STACK_UNDERFLOW" 2 173 "0x37F"
d G "WDT_WINDOW_VIOLATION" 2 174 "0x31F"
c L "sleep" 2 3 6 "FUNCTION"
f N "setup_timer_0" 2 182 ""
v L "mode" 2 182 "int16" `131 
f B "setup_timer_0" 2 182 "void(int16 mode)" `130 
f N "setup_timer_0" 2 183 ""
v L "mode" 2 183 "int16" `133 
v L "postscale" 2 183 "int8" `134 
f B "setup_timer_0" 2 183 "void(int16 mode,int8 postscale)" `132 
f N "setup_timer_0" 2 184 ""
v L "mode" 2 184 "int16" `136 
v L "period" 2 184 "int8" `137 
v L "postscale" 2 184 "int8" `138 
f B "setup_timer_0" 2 184 "void(int16 mode,int8 period,int8 postscale)" `135  "8-bit mode only"
f N "set_timer0" 2 185 ""
v L "value" 2 185 "int8" `140 
f B "set_timer0" 2 185 "void(int8 value)" `139 
f N "set_timer0" 2 186 ""
v L "value" 2 186 "int16" `142 
f B "set_timer0" 2 186 "void(int16 value)" `141 
f N "get_timer0" 2 187 ""
f B "get_timer0" 2 187 "int8()" `143 
f N "get_timer0" 2 188 ""
f G "get_timer0" 2 188 "int16(int8 mode,int8 prescaler)" `144 
f N "setup_counters" 2 189 ""
v L "mode" 2 189 "int8" `145 
v L "prescaler" 2 189 "int8" `146 
f B "setup_counters" 2 189 "void(int8 mode,int8 prescaler)" `144 
f N "set_rtcc" 2 190 ""
v L "value" 2 190 "int8" `148 
f B "set_rtcc" 2 190 "void(int8 value)" `147 
f N "set_rtcc" 2 191 ""
v L "value" 2 191 "int16" `150 
f B "set_rtcc" 2 191 "void(int16 value)" `149 
f N "get_rtcc" 2 192 ""
f B "get_rtcc" 2 192 "int8()" `151 
f N "get_rtcc" 2 193 ""
f G "get_rtcc" 2 193 "int16(int16 mode)" `152  "Constants used for SETUP_TIMER_0() first parameter are:"
d G "T0_INTERNAL" 2 195 "0x8050"
d G "T0_HFINTOSC" 2 196 "0x8060"
d G "T0_LFINTOSC" 2 197 "0x8080"
d G "T0_SOSC" 2 198 "0x80C0"
d G "T0_CLC1" 2 199 "0x80E0"
d G "T0_EXT_L_TO_H" 2 200 "0x8000"
d G "T0_EXT_H_TO_L" 2 201 "0x8020"
d G "T0_OFF" 2 202 "0"
d G "T0_INPUT_SYNCRONIZED" 2 204 "0x0000"
d G "T0_INPUT_NOT_SYNCRONIZED" 2 205 "0x0010"
d G "T0_DIV_1" 2 207 "0x0000"
d G "T0_DIV_2" 2 208 "0x0001"
d G "T0_DIV_4" 2 209 "0x0002"
d G "T0_DIV_8" 2 210 "0x0003"
d G "T0_DIV_16" 2 211 "0x0004"
d G "T0_DIV_32" 2 212 "0x0005"
d G "T0_DIV_64" 2 213 "0x0006"
d G "T0_DIV_128" 2 214 "0x0007"
d G "T0_DIV_256" 2 215 "0x0008"
d G "T0_DIV_512" 2 216 "0x0009"
d G "T0_DIV_1024" 2 217 "0x000A"
d G "T0_DIV_2048" 2 218 "0x000B"
d G "T0_DIV_4096" 2 219 "0x000C"
d G "T0_DIV_8192" 2 220 "0x000D"
d G "T0_DIV_16384" 2 221 "0x000E"
d G "T0_DIV_32768" 2 222 "0x000F"
d G "T0_8_BIT" 2 224 "0x1000"
d G "T0_16_BIT" 2 225 "0x0000"
d G "RTCC_INTERNAL" 2 230 "0x8040"
d G "RTCC_EXT_L_TO_H" 2 231 "0x8000"
d G "RTCC_EXT_H_TO_L" 2 232 "0x8020"
d G "RTCC_OFF" 2 233 "0x0000"
d G "RTCC_8_BIT" 2 234 "0x1000"
d G "RTCC_DIV_1" 2 236 "0x0000"
d G "RTCC_DIV_2" 2 237 "0x0001"
d G "RTCC_DIV_4" 2 238 "0x0002"
d G "RTCC_DIV_8" 2 239 "0x0003"
d G "RTCC_DIV_16" 2 240 "0x0004"
d G "RTCC_DIV_32" 2 241 "0x0005"
d G "RTCC_DIV_64" 2 242 "0x0006"
d G "RTCC_DIV_128" 2 243 "0x0007"
d G "RTCC_DIV_256" 2 244 "0x0008"
c L "get_rtcc" 2 3 6 "FUNCTION"
f N "setup_wdt" 2 252 ""
v L "mode" 2 252 "int16" `153 
f B "setup_wdt" 2 252 "void(int16 mode)" `152 
f N "restart_wdt" 2 253 ""
f B "restart_wdt" 2 253 "void()" `154 
f N "get_wdt" 2 254 ""
f B "get_wdt" 2 254 "int8()" `155  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 257 "0x8000"
d G "WDT_OFF" 2 258 "0x0000"
d G "WDT_1MS" 2 261 "0x0001"
d G "WDT_2MS" 2 262 "0x0003"
d G "WDT_4MS" 2 263 "0x0005"
d G "WDT_8MS" 2 264 "0x0007"
d G "WDT_16MS" 2 265 "0x0009"
d G "WDT_32MS" 2 266 "0x000B"
d G "WDT_64MS" 2 267 "0x000D"
d G "WDT_128MS" 2 268 "0x000F"
d G "WDT_256MS" 2 269 "0x0011"
d G "WDT_512MS" 2 270 "0x0013"
d G "WDT_1S" 2 271 "0x0015"
d G "WDT_2S" 2 272 "0x0017"
d G "WDT_4S" 2 273 "0x0019"
d G "WDT_8S" 2 274 "0x001B"
d G "WDT_16S" 2 275 "0x001D"
d G "WDT_32S" 2 276 "0x001F"
d G "WDT_64S" 2 277 "0x0021"
d G "WDT_128S" 2 278 "0x0023"
d G "WDT_256S" 2 279 "0x0025"
d G "WDT_WINDOW_12_PERCENT" 2 282 "0x0000"
d G "WDT_WINDOW_25_PERCENT" 2 283 "0x0100"
d G "WDT_WINDOW_37_PERCENT" 2 284 "0x0200"
d G "WDT_WINDOW_50_PERCENT" 2 285 "0x0300"
d G "WDT_WINDOW_62_PERCENT" 2 286 "0x0400"
d G "WDT_WINDOW_75_PERCENT" 2 287 "0x0500"
d G "WDT_WINDOW_87_PERCENT" 2 288 "0x0600"
d G "WDT_WINDOW_100_PERCENT" 2 289 "0x0700"
d G "WDT_CLK_31000" 2 292 "0x0000"
d G "WDT_CLK_31250" 2 293 "0x1000"
c L "get_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 300 ""
v L "mode" 2 300 "int32" `158 
f B "setup_timer_1" 2 300 "void(int32 mode)" `157 
f N "get_timer1" 2 301 ""
f B "get_timer1" 2 301 "int16()" `159 
f N "set_timer1" 2 302 ""
v L "value" 2 302 "int16" `161 
f B "set_timer1" 2 302 "void(int16 value)" `160  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 305 "0"
d G "T1_EXTERNAL" 2 306 "0x0003"
d G "T1_INTERNAL" 2 307 "0x0103"
d G "T1_FOSC" 2 308 "0x0203"
d G "T1_DCO" 2 309 "0x0303"
d G "T1_LFINTRC" 2 310 "0x0403"
d G "T1_MFINTRC" 2 311 "0x0503"
d G "T1_SOSC" 2 312 "0x0603"
d G "T1_CLKR" 2 313 "0x0703"
d G "T1_TIMER0" 2 314 "0x0803"
d G "T1_TIMER3" 2 315 "0x0A03"
d G "T1_TIMER5" 2 316 "0x0B03"
d G "T1_CLC1" 2 317 "0x0C03"
d G "T1_CLC2" 2 318 "0x0D03"
d G "T1_CLC3" 2 319 "0x0E03"
d G "T1_CLC4" 2 320 "0x0F03"
d G "T1_SYNC" 2 322 "0x04"
d G "T1_DIV_BY_1" 2 324 "0"
d G "T1_DIV_BY_2" 2 325 "0x10"
d G "T1_DIV_BY_4" 2 326 "0x20"
d G "T1_DIV_BY_8" 2 327 "0x30"
d G "T1_GATE" 2 329 "0x8000"
d G "T1_GATE_INVERTED" 2 330 "0xC000"
d G "T1_GATE_TOGGLE" 2 331 "0xA000"
d G "T1_GATE_SINGLE" 2 332 "0x9000"
d G "T1_GATE_TIMER0" 2 333 "0x018000"
d G "T1_GATE_TIMER2" 2 334 "0x038000"
d G "T1_GATE_TIMER3" 2 335 "0x048000"
d G "T1_GATE_TIMER4" 2 336 "0x058000"
d G "T1_GATE_TIMER5" 2 337 "0x068000"
d G "T1_GATE_TIMER6" 2 338 "0x078000"
d G "T1_GATE_SMT1" 2 339 "0x088000"
d G "T1_GATE_SMT2" 2 340 "0x098000"
d G "T1_GATE_CCP1" 2 341 "0x0A8000"
d G "T1_GATE_CCP2" 2 342 "0x0B8000"
d G "T1_GATE_CCP3" 2 343 "0x0C8000"
d G "T1_GATE_CCP4" 2 344 "0x0D8000"
d G "T1_GATE_CCP5" 2 345 "0x0E8000"
d G "T1_GATE_PWM6" 2 346 "0x0F8000"
d G "T1_GATE_PWM7" 2 347 "0x108000"
d G "T1_GATE_DDS" 2 348 "0x118000"
d G "T1_GATE_COMP1" 2 349 "0x128000"
d G "T1_GATE_COMP2" 2 350 "0x138000"
d G "T1_GATE_ZCD1" 2 351 "0x148000"
d G "T1_GATE_CLC1" 2 352 "0x158000"
d G "T1_GATE_CLC2" 2 353 "0x168000"
d G "T1_GATE_CLC3" 2 354 "0x178000"
d G "T1_GATE_CLC4" 2 355 "0x188000"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 360 ""
v L "mode" 2 360 "int32" `163 
v L "period" 2 360 "int8" `164 
v L "postscaler" 2 360 "int8" `165 
f B "setup_timer_2" 2 360 "void(int32 mode,int8 period,int8 postscaler)" `162 
f N "get_timer2" 2 361 ""
f B "get_timer2" 2 361 "int8()" `166 
f N "set_timer2" 2 362 ""
v L "value" 2 362 "int8" `168 
f B "set_timer2" 2 362 "void(int8 value)" `167  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 364 "0"
d G "T2_DIV_BY_1" 2 365 "0x80"
d G "T2_DIV_BY_2" 2 366 "0x90"
d G "T2_DIV_BY_4" 2 367 "0xA0"
d G "T2_DIV_BY_8" 2 368 "0xB0"
d G "T2_DIV_BY_16" 2 369 "0xC0"
d G "T2_DIV_BY_32" 2 370 "0xD0"
d G "T2_DIV_BY_64" 2 371 "0xE0"
d G "T2_DIV_BY_128" 2 372 "0xF0"
d G "T2_CLK_T2IN" 2 374 "0"
d G "T2_CLK_INTERNAL" 2 375 "0x0100"
d G "T2_CLK_FOSC" 2 376 "0x0200"
d G "T2_CLK_HFINTRC" 2 377 "0x0300"
d G "T2_CLK_LFINTRC" 2 378 "0x0400"
d G "T2_CLK_MFINTRC" 2 379 "0x0500"
d G "T2_CLK_SOSC" 2 380 "0x0600"
d G "T2_CLK_CLKR" 2 381 "0x0700"
d G "T2_CLK_NCO" 2 382 "0x0800"
d G "T2_CLK_ZCD" 2 383 "0x0900"
d G "T2_CLK_CLC1" 2 384 "0x0A00"
d G "T2_CLK_CLC2" 2 385 "0x0B00"
d G "T2_CLK_CLC3" 2 386 "0x0C00"
d G "T2_CLK_CLC4" 2 387 "0x0D00"
d G "T2_START_IMMEDIATELY" 2 390 "0"
d G "T2_START_WHEN_HIGH" 2 391 "0x010000"
d G "T2_START_WHEN_LOW" 2 392 "0x020000"
d G "T2_RESET_ON_BOTH_EDGES" 2 393 "0x030000"
d G "T2_RESET_ON_RE" 2 394 "0x040000"
d G "T2_RESET_ON_FE" 2 395 "0x050000"
d G "T2_RESET_WHEN_LOW" 2 396 "0x060000"
d G "T2_RESET_WHEN_HIGH" 2 397 "0x070000"
d G "T2_ONE_SHOT_START_IMMEDIATELY" 2 398 "0x080000"
d G "T2_ONE_SHOT_START_ON_RE" 2 399 "0x090000"
d G "T2_ONE_SHOT_START_ON_FE" 2 400 "0x0A0000"
d G "T2_ONE_SHOT_START_ON_BOTH_EDGES" 2 401 "0x0B0000"
d G "T2_ONE_SHOT_START_ON_RE_RESET_ON_RE" 2 402 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
d G "T2_ONE_SHOT_START_ON_FE_RESET_ON_FE" 2 403 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
d G "T2_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 2 404 "0x0E0000"
d G "T2_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 2 405 "0x0F0000"
d G "T2_MONO_STABLE_START_ON_RE" 2 406 "0x110000"
d G "T2_MONO_STABLE_START_ON_FE" 2 407 "0x120000"
d G "T2_MONO_STABLE_START_ON_EE" 2 408 "0x130000"
d G "T2_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 2 409 "0x160000"
d G "T2_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 2 410 "0x170000"
d G "T2_SYNC_ON_WITH_T2CLK" 2 412 "0x200000"
d G "T2_INVERTED" 2 413 "0x400000"
d G "T2_SYNC_PRESCALER_WITH_CLK" 2 414 "0x800000"
d G "T2_RESET_FROM_T2IN" 2 417 "0"
d G "T2_RESET_FROM_TMR4" 2 418 "0x02000000"
d G "T2_RESET_FROM_TMR6" 2 419 "0x03000000"
d G "T2_RESET_FROM_CCP1" 2 420 "0x04000000"
d G "T2_RESET_FROM_CCP2" 2 421 "0x05000000"
d G "T2_RESET_FROM_CCP3" 2 422 "0x06000000"
d G "T2_RESET_FROM_CCP4" 2 423 "0x07000000"
d G "T2_RESET_FROM_CCP5" 2 424 "0x08000000"
d G "T2_RESET_FROM_PWM6" 2 425 "0x09000000"
d G "T2_RESET_FROM_PWM7" 2 426 "0x0A000000"
d G "T2_RESET_FROM_C1OUT" 2 427 "0x0B000000"
d G "T2_RESET_FROM_C2OUT" 2 428 "0x0C000000"
d G "T2_RESET_FROM_ZCD" 2 429 "0x0D000000"
d G "T2_RESET_FROM_CLC1" 2 430 "0x0E000000"
d G "T2_RESET_FROM_CLC2" 2 431 "0x0F000000"
d G "T2_RESET_FROM_CLC3" 2 432 "0x10000000"
d G "T2_RESET_FROM_CLC4" 2 433 "0x11000000"
c L "set_timer2" 2 3 3 "FUNCTION"
f N "setup_timer_3" 2 438 ""
v L "mode" 2 438 "int32" `170 
f B "setup_timer_3" 2 438 "void(int32 mode)" `169 
f N "get_timer3" 2 439 ""
f B "get_timer3" 2 439 "int16()" `171 
f N "set_timer3" 2 440 ""
v L "value" 2 440 "int16" `173 
f B "set_timer3" 2 440 "void(int16 value)" `172  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 443 "0"
d G "T3_EXTERNAL" 2 444 "0x0003"
d G "T3_INTERNAL" 2 445 "0x0103"
d G "T3_FOSC" 2 446 "0x0203"
d G "T3_DCO" 2 447 "0x0303"
d G "T3_LFINTRC" 2 448 "0x0403"
d G "T3_MFINTRC" 2 449 "0x0503"
d G "T3_SOSC" 2 450 "0x0603"
d G "T3_CLKR" 2 451 "0x0703"
d G "T3_TIMER0" 2 452 "0x0803"
d G "T3_TIMER1" 2 453 "0x0903"
d G "T3_TIMER5" 2 454 "0x0B03"
d G "T3_CLC1" 2 455 "0x0C03"
d G "T3_CLC2" 2 456 "0x0D03"
d G "T3_CLC3" 2 457 "0x0E03"
d G "T3_CLC4" 2 458 "0x0F03"
d G "T3_SYNC" 2 460 "0x04"
d G "T3_DIV_BY_1" 2 462 "0"
d G "T3_DIV_BY_2" 2 463 "0x10"
d G "T3_DIV_BY_4" 2 464 "0x20"
d G "T3_DIV_BY_8" 2 465 "0x30"
d G "T3_GATE" 2 467 "0x8000"
d G "T3_GATE_INVERTED" 2 468 "0xC000"
d G "T3_GATE_TOGGLE" 2 469 "0xA000"
d G "T3_GATE_SINGLE" 2 470 "0x9000"
d G "T3_GATE_TIMER0" 2 471 "0x018000"
d G "T3_GATE_TIMER1" 2 472 "0x028000"
d G "T3_GATE_TIMER2" 2 473 "0x038000"
d G "T3_GATE_TIMER4" 2 474 "0x058000"
d G "T3_GATE_TIMER5" 2 475 "0x068000"
d G "T3_GATE_TIMER6" 2 476 "0x078000"
d G "T3_GATE_SMT1" 2 477 "0x088000"
d G "T3_GATE_SMT2" 2 478 "0x098000"
d G "T3_GATE_CCP1" 2 479 "0x0A8000"
d G "T3_GATE_CCP2" 2 480 "0x0B8000"
d G "T3_GATE_CCP3" 2 481 "0x0C8000"
d G "T3_GATE_CCP4" 2 482 "0x0D8000"
d G "T3_GATE_CCP5" 2 483 "0x0E8000"
d G "T3_GATE_PWM6" 2 484 "0x0F8000"
d G "T3_GATE_PWM7" 2 485 "0x108000"
d G "T3_GATE_DDS" 2 486 "0x118000"
d G "T3_GATE_COMP1" 2 487 "0x128000"
d G "T3_GATE_COMP2" 2 488 "0x138000"
d G "T3_GATE_ZCD1" 2 489 "0x148000"
d G "T3_GATE_CLC1" 2 490 "0x158000"
d G "T3_GATE_CLC2" 2 491 "0x168000"
d G "T3_GATE_CLC3" 2 492 "0x178000"
d G "T3_GATE_CLC4" 2 493 "0x188000"
c L "set_timer3" 2 3 3 "FUNCTION"
f N "setup_timer_4" 2 498 ""
v L "mode" 2 498 "int32" `175 
v L "period" 2 498 "int8" `176 
v L "postscaler" 2 498 "int8" `177 
f B "setup_timer_4" 2 498 "void(int32 mode,int8 period,int8 postscaler)" `174 
f N "get_timer4" 2 499 ""
f B "get_timer4" 2 499 "int8()" `178 
f N "set_timer4" 2 500 ""
v L "value" 2 500 "int8" `180 
f B "set_timer4" 2 500 "void(int8 value)" `179  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 502 "0"
d G "T4_DIV_BY_1" 2 503 "0x80"
d G "T4_DIV_BY_2" 2 504 "0x90"
d G "T4_DIV_BY_4" 2 505 "0xA0"
d G "T4_DIV_BY_8" 2 506 "0xB0"
d G "T4_DIV_BY_16" 2 507 "0xC0"
d G "T4_DIV_BY_32" 2 508 "0xD0"
d G "T4_DIV_BY_64" 2 509 "0xE0"
d G "T4_DIV_BY_128" 2 510 "0xF0"
d G "T4_CLK_T4IN" 2 512 "0"
d G "T4_CLK_INTERNAL" 2 513 "0x0100"
d G "T4_CLK_FOSC" 2 514 "0x0200"
d G "T4_CLK_HFINTRC" 2 515 "0x0300"
d G "T4_CLK_LFINTRC" 2 516 "0x0400"
d G "T4_CLK_MFINTRC" 2 517 "0x0500"
d G "T4_CLK_SOSC" 2 518 "0x0600"
d G "T4_CLK_CLKR" 2 519 "0x0700"
d G "T4_CLK_NCO" 2 520 "0x0800"
d G "T4_CLK_ZCD" 2 521 "0x0900"
d G "T4_CLK_CLC1" 2 522 "0x0A00"
d G "T4_CLK_CLC2" 2 523 "0x0B00"
d G "T4_CLK_CLC3" 2 524 "0x0C00"
d G "T4_CLK_CLC4" 2 525 "0x0D00"
d G "T4_START_IMMEDIATELY" 2 528 "0"
d G "T4_START_WHEN_HIGH" 2 529 "0x010000"
d G "T4_START_WHEN_LOW" 2 530 "0x020000"
d G "T4_RESET_ON_BOTH_EDGES" 2 531 "0x030000"
d G "T4_RESET_ON_RE" 2 532 "0x040000"
d G "T4_RESET_ON_FE" 2 533 "0x050000"
d G "T4_RESET_WHEN_LOW" 2 534 "0x060000"
d G "T4_RESET_WHEN_HIGH" 2 535 "0x070000"
d G "T4_ONE_SHOT_START_IMMEDIATELY" 2 536 "0x080000"
d G "T4_ONE_SHOT_START_ON_RE" 2 537 "0x090000"
d G "T4_ONE_SHOT_START_ON_FE" 2 538 "0x0A0000"
d G "T4_ONE_SHOT_START_ON_BOTH_EDGES" 2 539 "0x0B0000"
d G "T4_ONE_SHOT_START_ON_RE_RESET_ON_RE" 2 540 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
d G "T4_ONE_SHOT_START_ON_FE_RESET_ON_FE" 2 541 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
d G "T4_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 2 542 "0x0E0000"
d G "T4_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 2 543 "0x0F0000"
d G "T4_MONO_STABLE_START_ON_RE" 2 544 "0x110000"
d G "T4_MONO_STABLE_START_ON_FE" 2 545 "0x120000"
d G "T4_MONO_STABLE_START_ON_EE" 2 546 "0x130000"
d G "T4_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 2 547 "0x160000"
d G "T4_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 2 548 "0x170000"
d G "T4_SYNC_ON_WITH_T2CLK" 2 551 "0x200000"
d G "T4_INVERTED" 2 552 "0x400000"
d G "T4_SYNC_PRESCALER_WITH_CLK" 2 553 "0x800000"
d G "T4_RESET_FROM_T4IN" 2 556 "0"
d G "T4_RESET_FROM_TMR2" 2 557 "0x01000000"
d G "T4_RESET_FROM_TMR6" 2 558 "0x03000000"
d G "T4_RESET_FROM_CCP1" 2 559 "0x04000000"
d G "T4_RESET_FROM_CCP2" 2 560 "0x05000000"
d G "T4_RESET_FROM_CCP3" 2 561 "0x06000000"
d G "T4_RESET_FROM_CCP4" 2 562 "0x07000000"
d G "T4_RESET_FROM_CCP5" 2 563 "0x08000000"
d G "T4_RESET_FROM_PWM6" 2 564 "0x09000000"
d G "T4_RESET_FROM_PWM7" 2 565 "0x0A000000"
d G "T4_RESET_FROM_C1OUT" 2 566 "0x0B000000"
d G "T4_RESET_FROM_C2OUT" 2 567 "0x0C000000"
d G "T4_RESET_FROM_ZCD" 2 568 "0x0D000000"
d G "T4_RESET_FROM_CLC1" 2 569 "0x0E000000"
d G "T4_RESET_FROM_CLC2" 2 570 "0x0F000000"
d G "T4_RESET_FROM_CLC3" 2 571 "0x10000000"
d G "T4_RESET_FROM_CLC4" 2 572 "0x11000000"
c L "set_timer4" 2 3 3 "FUNCTION"
f N "setup_timer_5" 2 577 ""
v L "mode" 2 577 "int32" `182 
f B "setup_timer_5" 2 577 "void(int32 mode)" `181 
f N "get_timer5" 2 578 ""
f B "get_timer5" 2 578 "int16()" `183 
f N "set_timer5" 2 579 ""
v L "value" 2 579 "int16" `185 
f B "set_timer5" 2 579 "void(int16 value)" `184  "Constants used for SETUP_TIMER_5() are:"
d G "T5_DISABLED" 2 582 "0"
d G "T5_EXTERNAL" 2 583 "0x0003"
d G "T5_INTERNAL" 2 584 "0x0103"
d G "T5_FOSC" 2 585 "0x0203"
d G "T5_DCO" 2 586 "0x0303"
d G "T5_LFINTRC" 2 587 "0x0403"
d G "T5_MFINTRC" 2 588 "0x0503"
d G "T5_SOSC" 2 589 "0x0603"
d G "T5_CLKR" 2 590 "0x0703"
d G "T5_TIMER0" 2 591 "0x0803"
d G "T5_TIMER1" 2 592 "0x0903"
d G "T5_TIMER3" 2 593 "0x0A03"
d G "T5_CLC1" 2 594 "0x0C03"
d G "T5_CLC2" 2 595 "0x0D03"
d G "T5_CLC3" 2 596 "0x0E03"
d G "T5_CLC4" 2 597 "0x0F03"
d G "T5_SYNC" 2 599 "0x04"
d G "T5_DIV_BY_1" 2 601 "0"
d G "T5_DIV_BY_2" 2 602 "0x10"
d G "T5_DIV_BY_4" 2 603 "0x20"
d G "T5_DIV_BY_8" 2 604 "0x30"
d G "T5_GATE" 2 606 "0x8000"
d G "T5_GATE_INVERTED" 2 607 "0xC000"
d G "T5_GATE_TOGGLE" 2 608 "0xA000"
d G "T5_GATE_SINGLE" 2 609 "0x9000"
d G "T5_GATE_TIMER0" 2 610 "0x018000"
d G "T5_GATE_TIMER1" 2 611 "0x028000"
d G "T5_GATE_TIMER2" 2 612 "0x038000"
d G "T5_GATE_TIMER5" 2 613 "0x048000"
d G "T5_GATE_TIMER4" 2 614 "0x058000"
d G "T5_GATE_TIMER6" 2 615 "0x078000"
d G "T5_GATE_SMT1" 2 616 "0x088000"
d G "T5_GATE_SMT2" 2 617 "0x098000"
d G "T5_GATE_CCP1" 2 618 "0x0A8000"
d G "T5_GATE_CCP2" 2 619 "0x0B8000"
d G "T5_GATE_CCP3" 2 620 "0x0C8000"
d G "T5_GATE_CCP4" 2 621 "0x0D8000"
d G "T5_GATE_CCP5" 2 622 "0x0E8000"
d G "T5_GATE_PWM6" 2 623 "0x0F8000"
d G "T5_GATE_PWM7" 2 624 "0x108000"
d G "T5_GATE_DDS" 2 625 "0x118000"
d G "T5_GATE_COMP1" 2 626 "0x128000"
d G "T5_GATE_COMP2" 2 627 "0x138000"
d G "T5_GATE_ZCD1" 2 628 "0x148000"
d G "T5_GATE_CLC1" 2 629 "0x158000"
d G "T5_GATE_CLC2" 2 630 "0x168000"
d G "T5_GATE_CLC3" 2 631 "0x178000"
d G "T5_GATE_CLC4" 2 632 "0x188000"
c L "set_timer5" 2 3 3 "FUNCTION"
f N "setup_timer_6" 2 637 ""
v L "mode" 2 637 "int32" `187 
v L "period" 2 637 "int8" `188 
v L "postscaler" 2 637 "int8" `189 
f B "setup_timer_6" 2 637 "void(int32 mode,int8 period,int8 postscaler)" `186 
f N "get_timer6" 2 638 ""
f B "get_timer6" 2 638 "int8()" `190 
f N "set_timer6" 2 639 ""
v L "value" 2 639 "int8" `192 
f B "set_timer6" 2 639 "void(int8 value)" `191  "Constants used for SETUP_TIMER_6() are:"
d G "T6_DISABLED" 2 641 "0"
d G "T6_DIV_BY_1" 2 642 "0x80"
d G "T6_DIV_BY_2" 2 643 "0x90"
d G "T6_DIV_BY_4" 2 644 "0xA0"
d G "T6_DIV_BY_8" 2 645 "0xB0"
d G "T6_DIV_BY_16" 2 646 "0xC0"
d G "T6_DIV_BY_32" 2 647 "0xD0"
d G "T6_DIV_BY_64" 2 648 "0xE0"
d G "T6_DIV_BY_128" 2 649 "0xF0"
d G "T6_CLK_T6IN" 2 651 "0"
d G "T6_CLK_INTERNAL" 2 652 "0x0100"
d G "T6_CLK_FOSC" 2 653 "0x0200"
d G "T6_CLK_HFINTRC" 2 654 "0x0300"
d G "T6_CLK_LFINTRC" 2 655 "0x0400"
d G "T6_CLK_MFINTRC" 2 656 "0x0500"
d G "T6_CLK_SOSC" 2 657 "0x0600"
d G "T6_CLK_CLKR" 2 658 "0x0700"
d G "T6_CLK_NCO" 2 659 "0x0800"
d G "T6_CLK_ZCD" 2 660 "0x0900"
d G "T6_CLK_CLC1" 2 661 "0x0A00"
d G "T6_CLK_CLC2" 2 662 "0x0B00"
d G "T6_CLK_CLC3" 2 663 "0x0C00"
d G "T6_CLK_CLC4" 2 664 "0x0D00"
d G "T6_START_IMMEDIATELY" 2 667 "0"
d G "T6_START_WHEN_HIGH" 2 668 "0x010000"
d G "T6_START_WHEN_LOW" 2 669 "0x020000"
d G "T6_RESET_ON_BOTH_EDGES" 2 670 "0x030000"
d G "T6_RESET_ON_RE" 2 671 "0x040000"
d G "T6_RESET_ON_FE" 2 672 "0x050000"
d G "T6_RESET_WHEN_LOW" 2 673 "0x060000"
d G "T6_RESET_WHEN_HIGH" 2 674 "0x070000"
d G "T6_ONE_SHOT_START_IMMEDIATELY" 2 675 "0x080000"
d G "T6_ONE_SHOT_START_ON_RE" 2 676 "0x090000"
d G "T6_ONE_SHOT_START_ON_FE" 2 677 "0x0A0000"
d G "T6_ONE_SHOT_START_ON_BOTH_EDGES" 2 678 "0x0B0000"
d G "T6_ONE_SHOT_START_ON_RE_RESET_ON_RE" 2 679 "0x0C0000" "starts on first rising edge, resets on subsequent rising edges"
d G "T6_ONE_SHOT_START_ON_FE_RESET_ON_FE" 2 680 "0x0D0000" "starts on first falling edge, resets on subsequent falling edges"
d G "T6_ONE_SHOT_START_ON_RE_RESET_WHEN_LOW" 2 681 "0x0E0000"
d G "T6_ONE_SHOT_START_ON_FE_RESET_WHEN_HIGH" 2 682 "0x0F0000"
d G "T6_MONO_STABLE_START_ON_RE" 2 683 "0x110000"
d G "T6_MONO_STABLE_START_ON_FE" 2 684 "0x120000"
d G "T6_MONO_STABLE_START_ON_EE" 2 685 "0x130000"
d G "T6_ONE_SHOT_START_WHEN_HIGH_RESET_WHEN_LOW" 2 686 "0x160000"
d G "T6_ONE_SHOT_START_WHEN_LOW_RESET_WHEN_HIGH" 2 687 "0x170000"
d G "T6_SYNC_ON_WITH_T2CLK" 2 689 "0x200000"
d G "T6_INVERTED" 2 690 "0x400000"
d G "T6_SYNC_PRESCALER_WITH_CLK" 2 691 "0x800000"
d G "T6_RESET_FROM_T6IN" 2 694 "0"
d G "T6_RESET_FROM_TMR2" 2 695 "0x01000000"
d G "T6_RESET_FROM_TMR4" 2 696 "0x02000000"
d G "T6_RESET_FROM_CCP1" 2 697 "0x04000000"
d G "T6_RESET_FROM_CCP2" 2 698 "0x05000000"
d G "T6_RESET_FROM_CCP3" 2 699 "0x06000000"
d G "T6_RESET_FROM_CCP4" 2 700 "0x07000000"
d G "T6_RESET_FROM_CCP5" 2 701 "0x08000000"
d G "T6_RESET_FROM_PWM6" 2 702 "0x09000000"
d G "T6_RESET_FROM_PWM7" 2 703 "0x0A000000"
d G "T6_RESET_FROM_C1OUT" 2 704 "0x0B000000"
d G "T6_RESET_FROM_C2OUT" 2 705 "0x0C000000"
d G "T6_RESET_FROM_ZCD" 2 706 "0x0D000000"
d G "T6_RESET_FROM_CLC1" 2 707 "0x0E000000"
d G "T6_RESET_FROM_CLC2" 2 708 "0x0F000000"
d G "T6_RESET_FROM_CLC3" 2 709 "0x10000000"
d G "T6_RESET_FROM_CLC4" 2 710 "0x11000000"
c L "set_timer6" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 716 ""
v L "mode" 2 716 "int32" `194 
f B "setup_ccp1" 2 716 "void(int32 mode)" `193 
f N "setup_ccp1" 2 717 ""
v L "mode" 2 717 "int32" `196 
v L "pwm" 2 717 "int8" `197 
f B "setup_ccp1" 2 717 "void(int32 mode,int8 pwm)" `195 
f N "set_pwm1_duty" 2 718 ""
v L "value" 2 718 "int8" `199 
f B "set_pwm1_duty" 2 718 "void(int8 value)" `198 
f N "set_pwm1_duty" 2 719 ""
v L "value" 2 719 "int16" `201 
f B "set_pwm1_duty" 2 719 "void(int16 value)" `200  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 721 "0"
d G "CCP_CAPTURE_EE" 2 722 "0x03"
d G "CCP_CAPTURE_FE" 2 723 "0x04"
d G "CCP_CAPTURE_RE" 2 724 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 725 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 726 "0x07"
d G "CCP_COMPARE_TOGGLE_RESET_TIMER" 2 727 "0x01"
d G "CCP_COMPARE_TOGGLE" 2 728 "0x02"
d G "CCP_COMPARE_SET_ON_MATCH" 2 729 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 730 "0x09"
d G "CCP_COMPARE_PULSE" 2 731 "0x0A"
d G "CCP_COMPARE_PULSE_RESET_TIMER" 2 732 "0x0B"
d G "CCP_PWM" 2 733 "0x0F"
d G "CCP_CAPTURE_INPUT_CCP_PIN" 2 735 "0"
d G "CCP_CAPTURE_INPUT_C1OUT" 2 736 "0x010000"
d G "CCP_CAPTURE_INPUT_C2OUT" 2 737 "0x020000"
d G "CCP_CAPTURE_INPUT_IOC_INTERRUPT" 2 738 "0x030000"
d G "CCP_CAPTURE_INPUT_CLC1" 2 739 "0x040000"
d G "CCP_CAPTURE_INPUT_CLC2" 2 740 "0x050000"
d G "CCP_CAPTURE_INPUT_CLC3" 2 741 "0x060000"
d G "CCP_CAPTURE_INPUT_CLC4" 2 742 "0x070000"
d G "CCP_PWM_LEFT_JUSTIFIED_DUTY" 2 744 "0x10"
d G "CCP_TIMER2" 2 751 "0x0000"
d G "CCP_TIMER4" 2 752 "0x1000"
d G "CCP_TIMER6" 2 753 "0x2000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 756 ""
v L "mode" 2 756 "int32" `206 
f B "setup_ccp2" 2 756 "void(int32 mode)" `205 
f N "setup_ccp2" 2 757 ""
v L "mode" 2 757 "int32" `208 
v L "pwm" 2 757 "int8" `209 
f B "setup_ccp2" 2 757 "void(int32 mode,int8 pwm)" `207 
f N "set_pwm2_duty" 2 758 ""
v L "value" 2 758 "int8" `211 
f B "set_pwm2_duty" 2 758 "void(int8 value)" `210 
f N "set_pwm2_duty" 2 759 ""
v L "value" 2 759 "int16" `213 
f B "set_pwm2_duty" 2 759 "void(int16 value)" `212 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
f N "setup_pwm6" 2 767 ""
v L "mode" 2 767 "int32" `218 
f B "setup_pwm6" 2 767 "void(int32 mode)" `217 
f N "set_pwm6_duty" 2 768 ""
v L "value" 2 768 "int8" `220 
f B "set_pwm6_duty" 2 768 "void(int8 value)" `219 
f N "set_pwm6_duty" 2 769 ""
v L "value" 2 769 "int16" `222 
f B "set_pwm6_duty" 2 769 "void(int16 value)" `221 
f N "setup_pwm7" 2 770 ""
v L "mode" 2 770 "int32" `224 
f B "setup_pwm7" 2 770 "void(int32 mode)" `223 
f N "set_pwm7_duty" 2 771 ""
v L "value" 2 771 "int8" `226 
f B "set_pwm7_duty" 2 771 "void(int8 value)" `225 
f N "set_pwm7_duty" 2 772 ""
v L "value" 2 772 "int16" `228 
f B "set_pwm7_duty" 2 772 "void(int16 value)" `227  "Constants used for SETUP_PWMx() are:"
d G "PWM_ENABLED" 2 774 "0x80"
d G "PWM_DISABLED" 2 775 "0x10000"
d G "PWM_ACTIVE_LOW" 2 776 "0x10"
d G "PWM_ACTIVE_HIGH" 2 777 "0"
d G "PWM_TIMER2" 2 779 "0x0000"
d G "PWM_TIMER4" 2 780 "0x0100"
d G "PWM_TIMER6" 2 781 "0x0200"
c L "set_pwm7_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 789 ""
v L "mode" 2 789 "int32" `232 
f B "setup_spi" 2 789 "void(int32 mode)" `231 
f N "spi_write" 2 790 ""
v L "value" 2 790 "int8" `234 
f B "spi_write" 2 790 "void(int8 value)" `233 
f N "spi_write" 2 791 ""
v L "wait" 2 791 "int8" `236 
v L "value" 2 791 "int8" `237 
f B "spi_write" 2 791 "void(int8 wait,int8 value)" `235 
f N "spi_read" 2 792 ""
f B "spi_read" 2 792 "int8()" `238 
f N "spi_read" 2 793 ""
v L "value" 2 793 "int8" `240 
f B "spi_read" 2 793 "int8(int8 value)" `239 
f N "spi_data_is_in" 2 794 ""
f B "spi_data_is_in" 2 794 "int8()" `241 
f N "setup_spi2" 2 795 ""
v L "mode" 2 795 "int32" `243 
f B "setup_spi2" 2 795 "void(int32 mode)" `242 
f N "spi_write2" 2 796 ""
v L "value" 2 796 "int8" `245 
f B "spi_write2" 2 796 "void(int8 value)" `244 
f N "spi_read2" 2 797 ""
f B "spi_read2" 2 797 "int8()" `246 
f N "spi_read2" 2 798 ""
v L "value" 2 798 "int8" `248 
f B "spi_read2" 2 798 "int8(int8 value)" `247 
f N "spi_data_is_in2" 2 799 ""
f B "spi_data_is_in2" 2 799 "int8()" `249  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 801 "0x00"
d G "SPI_MASTER" 2 802 "0x20"
d G "SPI_SLAVE" 2 803 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 804 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 805 "0x00"
d G "SPI_CLK_DIV_4" 2 806 "0x00"
d G "SPI_CLK_DIV_16" 2 807 "0x01"
d G "SPI_CLK_DIV_64" 2 808 "0x02"
d G "SPI_CLK_T2" 2 809 "0x03"
d G "SPI_SS_DISABLED" 2 810 "0x01"
d G "SPI_XMIT_L_TO_H" 2 812 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 813 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 815 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 816 "0x8000"
d G "SPI_L_TO_H" 2 819 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 820 "SPI_SCK_IDLE_HIGH"
c L "spi_data_is_in2" 2 3 2 "FUNCTION"
f N "setup_uart" 2 824 ""
v L "baud" 2 824 "int32" `251 
f B "setup_uart" 2 824 "void(int32 baud)" `250 
f N "setup_uart" 2 825 ""
v L "baud" 2 825 "int32" `253 
v L "stream" 2 825 "int8" `254 
f B "setup_uart" 2 825 "void(int32 baud,int8 stream)" `252 
f N "setup_uart" 2 826 ""
v L "baud" 2 826 "int32" `256 
v L "stream" 2 826 "int8" `257 
v L "clock" 2 826 "int32" `258 
f B "setup_uart" 2 826 "void(int32 baud,int8 stream,int32 clock)" `255 
f N "set_uart_speed" 2 827 ""
v L "baud" 2 827 "int32" `260 
f B "set_uart_speed" 2 827 "void(int32 baud)" `259 
f N "set_uart_speed" 2 828 ""
v L "baud" 2 828 "int32" `262 
v L "stream" 2 828 "int8" `263 
f B "set_uart_speed" 2 828 "void(int32 baud,int8 stream)" `261 
f N "set_uart_speed" 2 829 ""
v L "baud" 2 829 "int32" `265 
v L "stream" 2 829 "int8" `266 
v L "clock" 2 829 "int32" `267 
f B "set_uart_speed" 2 829 "void(int32 baud,int8 stream,int32 clock)" `264  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 833 "2"
d G "UART_DATA" 2 834 "4"
d G "UART_AUTODETECT" 2 835 "8"
d G "UART_AUTODETECT_NOWAIT" 2 836 "9"
d G "UART_WAKEUP_ON_RDA" 2 837 "10"
d G "UART_SEND_BREAK" 2 838 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
f N "setup_comparator" 2 843 ""
v L "mode" 2 843 "int32" `269 
f B "setup_comparator" 2 843 "void(int32 mode)" `268  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 846 "0x003F003F"
d G "CP1_A0_A2" 2 849 "0x8000"
d G "CP1_A1_A2" 2 850 "0x8001"
d G "CP1_B3_A2" 2 851 "0x8002"
d G "CP1_B1_A2" 2 852 "0x8003"
d G "CP1_FVR_A2" 2 853 "0x8006"
d G "CP1_VSS_A2" 2 854 "0x8007"
d G "CP1_A0_A3" 2 855 "0x8008"
d G "CP1_A1_A3" 2 856 "0x8009"
d G "CP1_B3_A3" 2 857 "0x800A"
d G "CP1_B1_A3" 2 858 "0x800B"
d G "CP1_FVR_A3" 2 859 "0x800E"
d G "CP1_VSS_A3" 2 860 "0x800F"
d G "CP1_A0_DAC" 2 861 "0x8028"
d G "CP1_A1_DAC" 2 862 "0x8029"
d G "CP1_B3_DAC" 2 863 "0x802A"
d G "CP1_B1_DAC" 2 864 "0x802B"
d G "CP1_FVR_DAC" 2 865 "0x802E"
d G "CP1_VSS_DAC" 2 866 "0x802F"
d G "CP1_A0_FVR" 2 867 "0x8030"
d G "CP1_A1_FVR" 2 868 "0x8031"
d G "CP1_B3_FVR" 2 869 "0x8032"
d G "CP1_B1_FVR" 2 870 "0x8033"
d G "CP1_FVR_FVR" 2 871 "0x8036"
d G "CP1_VSS_FVR" 2 872 "0x8037"
d G "CP1_A0_VSS" 2 873 "0x8038"
d G "CP1_A1_VSS" 2 874 "0x8039"
d G "CP1_B3_VSS" 2 875 "0x803A"
d G "CP1_B1_VSS" 2 876 "0x803B"
d G "CP1_FVR_VSS" 2 877 "0x803E"
d G "CP1_VSS_VSS" 2 878 "0x803F"
d G "CP1_INT_L2H" 2 880 "0x0080"
d G "CP1_INT_H2L" 2 881 "0x0040"
d G "CP1_INVERT" 2 882 "0x1000"
d G "CP1_HYST" 2 883 "0x0200"
d G "CP1_SYNC" 2 884 "0x0100"
d G "CP2_A0_A2" 2 887 "0x80000000"
d G "CP2_A1_A2" 2 888 "0x80010000"
d G "CP2_B3_A2" 2 889 "0x80020000"
d G "CP2_B1_A2" 2 890 "0x80030000"
d G "CP2_FVR_A2" 2 891 "0x80060000"
d G "CP2_VSS_A2" 2 892 "0x80070000"
d G "CP2_A0_B0" 2 893 "0x80080000"
d G "CP2_A1_B0" 2 894 "0x80090000"
d G "CP2_B3_B0" 2 895 "0x800A0000"
d G "CP2_B1_B0" 2 896 "0x800B0000"
d G "CP2_FVR_B0" 2 897 "0x800E0000"
d G "CP2_VSS_B0" 2 898 "0x800F0000"
d G "CP2_A0_DAC" 2 899 "0x80280000"
d G "CP2_A1_DAC" 2 900 "0x80290000"
d G "CP2_B3_DAC" 2 901 "0x802A0000"
d G "CP2_B1_DAC" 2 902 "0x802B0000"
d G "CP2_FVR_DAC" 2 903 "0x802E0000"
d G "CP2_VSS_DAC" 2 904 "0x802F0000"
d G "CP2_A0_FVR" 2 905 "0x80300000"
d G "CP2_A1_FVR" 2 906 "0x80310000"
d G "CP2_B3_FVR" 2 907 "0x80320000"
d G "CP2_B1_FVR" 2 908 "0x80330000"
d G "CP2_FVR_FVR" 2 909 "0x80360000"
d G "CP2_VSS_FVR" 2 910 "0x80370000"
d G "CP2_A0_VSS" 2 911 "0x80380000"
d G "CP2_A1_VSS" 2 912 "0x80390000"
d G "CP2_B3_VSS" 2 913 "0x803A0000"
d G "CP2_B1_VSS" 2 914 "0x803B0000"
d G "CP2_FVR_VSS" 2 915 "0x803E0000"
d G "CP2_VSS_VSS" 2 916 "0x803F0000"
d G "CP2_INT_L2H" 2 918 "0x00800000"
d G "CP2_INT_H2L" 2 919 "0x00400000"
d G "CP2_INVERT" 2 920 "0x10000000"
d G "CP2_HYST" 2 921 "0x02000000"
d G "CP2_SYNC" 2 922 "0x01000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
f N "setup_vref" 2 929 ""
v L "mode" 2 929 "int8" `273 
f B "setup_vref" 2 929 "void(int8 mode)" `272  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 931 "0"
d G "VREF_ON" 2 932 "0x80"
d G "VREF_ADC_OFF" 2 934 "0"
d G "VREF_ADC_1v024" 2 935 "0x81"
d G "VREF_ADC_2v048" 2 936 "0x82"
d G "VREF_ADC_4v096" 2 937 "0x83"
d G "VREF_COMP_DAC_OFF" 2 939 "0"
d G "VREF_COMP_DAC_1v024" 2 940 "0x84"
d G "VREF_COMP_DAC_2v048" 2 941 "0x88"
d G "VREF_COMP_DAC_4v096" 2 942 "0x8C"
d G "TEMPERATURE_INDICATOR_DISABLED" 2 944 "0"
d G "TEMPERATURE_INDICATOR_ENABLED" 2 945 "0x20"
d G "TEMPERATURE_RANGE_LOW" 2 946 "0"
d G "TEMPERATURE_RANGE_HIGH" 2 947 "0x10"
c L "setup_vref" 2 3 3 "FUNCTION"
f N "setup_dac" 2 952 ""
v L "mode" 2 952 "int8" `275 
f B "setup_dac" 2 952 "void(int8 mode)" `274 
f N "dac_write" 2 953 ""
v L "value" 2 953 "int8" `277 
f B "dac_write" 2 953 "void(int8 value)" `276  "Constants used in SETUP_DAC() are:"
d G "DAC_OFF" 2 955 "0"
d G "DAC_VSS_VDD" 2 956 "0x80"
d G "DAC_VREF_VDD" 2 957 "0x81"
d G "DAC_VSS_VREF" 2 958 "0x84"
d G "DAC_VREF_VREF" 2 959 "0x85"
d G "DAC_VSS_FVR" 2 960 "0x88"
d G "DAC_VREF_FVR" 2 961 "0x89"
d G "DAC_OUTPUT2" 2 963 "0x10"
d G "DAC_OUTPUT" 2 964 "0x20"
c L "dac_write" 2 3 3 "FUNCTION"
f N "setup_cwg" 2 969 ""
v L "mode" 2 969 "int32" `279 
v L "shutdown" 2 969 "int16" `280 
v L "dt_rising" 2 969 "int8" `281 
v L "dt_falling" 2 969 "int8" `282 
f B "setup_cwg" 2 969 "void(int32 mode,int16 shutdown,int8 dt_rising,int8 dt_falling)" `278 
f N "setup_cwg2" 2 970 ""
v L "mode" 2 970 "int32" `284 
v L "shutdown" 2 970 "int16" `285 
v L "dt_rising" 2 970 "int8" `286 
v L "dt_falling" 2 970 "int8" `287 
f B "setup_cwg2" 2 970 "void(int32 mode,int16 shutdown,int8 dt_rising,int8 dt_falling)" `283 
f N "setup_cwg3" 2 971 ""
v L "mdoe" 2 971 "int32" `289 
v L "shutdown" 2 971 "int16" `290 
v L "dt_rising" 2 971 "int8" `291 
v L "dt_falling" 2 971 "int8" `292 
f B "setup_cwg3" 2 971 "void(int32 mdoe,int16 shutdown,int8 dt_rising,int8 dt_falling)" `288 
f N "cwg_restart" 2 972 ""
f B "cwg_restart" 2 972 "void()" `293 
f N "cwg2_restart" 2 973 ""
f B "cwg2_restart" 2 973 "void()" `294 
f N "cwg3_restart" 2 974 ""
f B "cwg3_restart" 2 974 "void()" `295 
f N "cwg_status" 2 975 ""
f B "cwg_status" 2 975 "int8()" `296 
f N "cwg2_status" 2 976 ""
f B "cwg2_status" 2 976 "void()" `297 
f N "cwg3_status" 2 977 ""
f B "cwg3_status" 2 977 "void()" `298  "Constants used in SETUP_CWG(), SETUP_CWG2() and SETUP_CWG3() first parameter are:"
d G "CWG_ENABLED" 2 979 "0x80"
d G "CWG_DISABLED" 2 980 "0x00"
d G "CWG_MODE_STEERING" 2 982 "0x00"
d G "CWG_MODE_SYNCRONOUS_STEERING" 2 983 "0x01"
d G "CWG_MODE_FULL_BRIDGE" 2 984 "0x02"
d G "CWG_MODE_FULL_BRIDGE_REV" 2 985 "0x03"
d G "CWG_MODE_HALF_BRIDGE" 2 986 "0x04"
d G "CWG_MODE_PUSH_PULL" 2 987 "0x05"
d G "CWG_CLOCK_HFINTOSC" 2 989 "0x0100"
d G "CWG_CLOCK_FOSC" 2 990 "0x0000"
d G "CWG_INPUT_CWGxIN" 2 992 "0x0000"
d G "CWG_INPUT_CCP1" 2 993 "0x1000"
d G "CWG_INPUT_CCP2" 2 994 "0x2000"
d G "CWG_INPUT_CCP3" 2 995 "0x3000"
d G "CWG_INPUT_CCP4" 2 996 "0x4000"
d G "CWG_INPUT_CCP5" 2 997 "0x5000"
d G "CWG_INPUT_PWM6" 2 998 "0x6000"
d G "CWG_INPUT_PWM7" 2 999 "0x7000"
d G "CWG_INPUT_NCO" 2 1000 "0x8000"
d G "CWG_INPUT_COMP1" 2 1001 "0x9000"
d G "CWG_INPUT_COMP2" 2 1002 "0xA000"
d G "CWG_INPUT_DSM" 2 1003 "0xB000"
d G "CWG_INPUT_CLC1" 2 1004 "0xC000"
d G "CWG_INPUT_CLC2" 2 1005 "0xD000"
d G "CWG_INPUT_CLC3" 2 1006 "0xE000"
d G "CWG_INPUT_CLC4" 2 1007 "0xF000"
d G "CWG_A_INVERTED" 2 1009 "0x010000"
d G "CWG_B_INVERTED" 2 1010 "0x020000"
d G "CWG_C_INVERTED" 2 1011 "0x040000"
d G "CWG_D_INVERTED" 2 1012 "0x080000"
d G "CWG_A_FORCE_HIGH" 2 1014 "0x10000000" "Only available in Steering modes"
d G "CWG_A_FORCE_LOW" 2 1015 "0x00000000" "Only available in Steering modes"
d G "CWG_A_OUTPUT_PWM" 2 1016 "0x01000000" "Only available in Steering modes"
d G "CWG_B_FORCE_HIGH" 2 1018 "0x20000000" "Only available in Steering modes"
d G "CWG_B_FORCE_LOW" 2 1019 "0x00000000" "Only available in Steering modes"
d G "CWG_B_OUTPUT_PWM" 2 1020 "0x02000000" "Only available in Steering modes"
d G "CWG_C_FORCE_HIGH" 2 1022 "0x40000000" "Only available in Steering modes"
d G "CWG_C_FORCE_LOW" 2 1023 "0x00000000" "Only available in Steering modes"
d G "CWG_C_OUTPUT_PWM" 2 1024 "0x04000000" "Only available in Steering modes"
d G "CWG_D_FORCE_HIGH" 2 1026 "0x80000000" "Only available in Steering modes"
d G "CWG_D_FORCE_LOW" 2 1027 "0x00000000" "Only available in Steering modes"
d G "CWG_D_OUTPUT_PWM" 2 1028 "0x08000000" "Only available in Steering modes"
d G "CWG_NO_AUTO_SHUTDOWN" 2 1032 "0x0000"
d G "CWG_SHUTDOWN_ON_CWGxIN" 2 1033 "0x0001"
d G "CWG_SHUTDOWN_ON_TMR2" 2 1034 "0x0002"
d G "CWG_SHUTDOWN_ON_TMR4" 2 1035 "0x0004"
d G "CWG_SHUTDOWN_ON_TMR6" 2 1036 "0x0008"
d G "CWG_SHUTDOWN_ON_COMP1" 2 1037 "0x0010"
d G "CWG_SHUTDOWN_ON_COMP2" 2 1038 "0x0020"
d G "CWG_SHUTDOWN_ON_CLC2" 2 1039 "0x0040"
d G "CWG_AUTO_RESTART" 2 1040 "0x4000"
d G "CWG_SHUTDOWN_AC_INACTIVE_STATE" 2 1042 "0x0000"
d G "CWG_SHUTDOWN_AC_TRISTATE" 2 1043 "0x0400"
d G "CWG_SHUTDOWN_AC_LOW" 2 1044 "0x0800"
d G "CWG_SHUTDOWN_AC_HIGH" 2 1045 "0x0C00"
d G "CWG_SHUTDOWN_BD_INACTIVE_STATE" 2 1047 "0"
d G "CWG_SHUTDOWN_BD_TRISTATE" 2 1048 "0x1000"
d G "CWG_SHUTDOWN_BD_LOW" 2 1049 "0x2000"
d G "CWG_SHUTDOWN_BD_HIGH" 2 1050 "0x3000"
d G "CWG_AUTO_SHUTDOWN" 2 1053 "0x80"
c L "cwg3_status" 2 3 5 "FUNCTION"
f N "setup_nco" 2 1060 ""
v L "mode" 2 1060 "int32" `300 
v L "inc_value" 2 1060 "int32" `301 
f B "setup_nco" 2 1060 "void(int32 mode,int32 inc_value)" `299 
f N "set_nco_inc_value" 2 1061 ""
v L "value" 2 1061 "int32" `303 
f B "set_nco_inc_value" 2 1061 "void(int32 value)" `302 
f N "set_nco_accumulator" 2 1062 ""
v L "value" 2 1062 "int32" `305 
f B "set_nco_accumulator" 2 1062 "void(int32 value)" `304 
f N "get_nco_accumulator" 2 1063 ""
f B "get_nco_accumulator" 2 1063 "int32()" `306 
f N "get_nco_inc_value" 2 1064 ""
f B "get_nco_inc_value" 2 1064 "int32()" `307  "Constants used in SETUP_NCO() first parameter are:"
d G "NCO_ENABLED" 2 1066 "0x0080"
d G "NCO_DISABLED" 2 1067 "0"
d G "NCO_ACTIVE_HIGH" 2 1069 "0x0010"
d G "NCO_ACTIVE_LOW" 2 1070 "0"
d G "NCO_PULSE_FREQ_MODE" 2 1072 "0x0001"
d G "NCO_FIXED_DUTY_MODE" 2 1073 "0"
d G "NCO_CLOCK_CLC4OUT" 2 1075 "0x0500"
d G "NCO_CLOCK_CLC3OUT" 2 1076 "0x0400"
d G "NCO_CLOCK_CLC2OUT" 2 1077 "0x0300"
d G "NCO_CLOCK_CLC1OUT" 2 1078 "0x0200"
d G "NCO_CLOCK_HFINTOSC" 2 1079 "0x0100"
d G "NCO_CLOCK_FOSC" 2 1080 "0"
d G "NCO_PULSE_WIDTH_1" 2 1083 "0"
d G "NCO_PULSE_WIDTH_2" 2 1084 "0x2000"
d G "NCO_PULSE_WIDTH_4" 2 1085 "0x4000"
d G "NCO_PULSE_WIDTH_8" 2 1086 "0x6000"
d G "NCO_PULSE_WIDTH_16" 2 1087 "0x8000"
d G "NCO_PULSE_WIDTH_32" 2 1088 "0xA000"
d G "NCO_PULSE_WIDTH_64" 2 1089 "0xC000"
d G "NCO_PULSE_WIDTH_128" 2 1090 "0xE000"
c L "get_nco_inc_value" 2 3 4 "FUNCTION"
f N "setup_clc1" 2 1099 ""
v L "mode" 2 1099 "int32" `310 
f B "setup_clc1" 2 1099 "void(int32 mode)" `309 
f N "setup_clc2" 2 1100 ""
v L "mode" 2 1100 "int32" `312 
f B "setup_clc2" 2 1100 "void(int32 mode)" `311 
f N "setup_clc3" 2 1101 ""
v L "mode" 2 1101 "int32" `314 
f B "setup_clc3" 2 1101 "void(int32 mode)" `313 
f N "setup_clc4" 2 1102 ""
v L "mode" 2 1102 "int32" `316 
f B "setup_clc4" 2 1102 "void(int32 mode)" `315 
f N "clc1_setup_input" 2 1103 ""
v L "input" 2 1103 "int8" `318 
v L "selection" 2 1103 "int8" `319 
f B "clc1_setup_input" 2 1103 "void(int8 input,int8 selection)" `317 
f N "clc2_setup_input" 2 1104 ""
v L "input" 2 1104 "int8" `321 
v L "selection" 2 1104 "int8" `322 
f B "clc2_setup_input" 2 1104 "void(int8 input,int8 selection)" `320 
f N "clc3_setup_input" 2 1105 ""
v L "input" 2 1105 "int8" `324 
v L "selection" 2 1105 "int8" `325 
f B "clc3_setup_input" 2 1105 "void(int8 input,int8 selection)" `323 
f N "clc4_setup_input" 2 1106 ""
v L "input" 2 1106 "int8" `327 
v L "selection" 2 1106 "int8" `328 
f B "clc4_setup_input" 2 1106 "void(int8 input,int8 selection)" `326 
f N "clc1_setup_gate" 2 1107 ""
v L "gate" 2 1107 "int8" `330 
v L "mode" 2 1107 "int16" `331 
f B "clc1_setup_gate" 2 1107 "void(int8 gate,int16 mode)" `329 
f N "clc2_setup_gate" 2 1108 ""
v L "gate" 2 1108 "int8" `333 
v L "mode" 2 1108 "int16" `334 
f B "clc2_setup_gate" 2 1108 "void(int8 gate,int16 mode)" `332 
f N "clc3_setup_gate" 2 1109 ""
v L "gate" 2 1109 "int8" `336 
v L "mode" 2 1109 "int16" `337 
f B "clc3_setup_gate" 2 1109 "void(int8 gate,int16 mode)" `335 
f N "clc4_setup_gate" 2 1110 ""
v L "gate" 2 1110 "int8" `339 
v L "mode" 2 1110 "int16" `340 
f B "clc4_setup_gate" 2 1110 "void(int8 gate,int16 mode)" `338  "Constants used in SETUP_CLCx() are:"
d G "CLC_ENABLED" 2 1112 "0x080"
d G "CLC_DISABLED" 2 1113 "0"
d G "CLC_INT_L_TO_H" 2 1115 "0x010"
d G "CLC_INT_H_TO_L" 2 1116 "0x008"
d G "CLC_OUTPUT_INVERTED" 2 1117 "0x100"
d G "CLC_MODE_AND_OR" 2 1119 "0x000"
d G "CLC_MODE_OR_XOR" 2 1120 "0x001"
d G "CLC_MODE_AND" 2 1121 "0x002"
d G "CLC_MODE_SR_LATCH" 2 1122 "0x003"
d G "CLC_MODE_1_INPUT_D_FLIP_FLOP" 2 1123 "0x004"
d G "CLC_MODE_2_INPUT_D_FLIP_FLOP" 2 1124 "0x005"
d G "CLC_MODE_JK_FLIP_FLOP" 2 1125 "0x006"
d G "CLC_MODE_1_INPUT_TRANSPARENT_LATCH" 2 1126 "0x007"
d G "CLC_INPUT_CLCIN0" 2 1129 "0"
d G "CLC_INPUT_CLCIN1" 2 1130 "0x01"
d G "CLC_INPUT_CLCIN2" 2 1131 "0x02"
d G "CLC_INPUT_CLCIN3" 2 1132 "0x03"
d G "CLC_INPUT_FOSC" 2 1133 "0x04"
d G "CLC_INPUT_HFINTOSC" 2 1134 "0x05"
d G "CLC_INPUT_LFINTOSC" 2 1135 "0x06"
d G "CLC_INPUT_SOSC" 2 1136 "0x07"
d G "CLC_INPUT_FRC" 2 1137 "0x08"
d G "CLC_INPUT_CLKR" 2 1138 "0x09"
d G "CLC_INPUT_TIMER0" 2 1139 "0x0A"
d G "CLC_INPUT_TIMER1" 2 1140 "0x0B"
d G "CLC_INPUT_TIMER2" 2 1141 "0x0C"
d G "CLC_INPUT_TIMER3" 2 1142 "0x0D"
d G "CLC_INPUT_TIMER4" 2 1143 "0x0E"
d G "CLC_INPUT_TIMER5" 2 1144 "0x0F"
d G "CLC_INPUT_TIMER6" 2 1145 "0x10"
d G "CLC_INPUT_SMT1" 2 1146 "0x11"
d G "CLC_INPUT_SMT2" 2 1147 "0x12"
d G "CLC_INPUT_CCP1" 2 1148 "0x13"
d G "CLC_INPUT_CCP2" 2 1149 "0x14"
d G "CLC_INPUT_CCP3" 2 1150 "0x15"
d G "CLC_INPUT_CCP4" 2 1151 "0x16"
d G "CLC_INPUT_CCP5" 2 1152 "0x17"
d G "CLC_INPUT_PWM6" 2 1153 "0x18"
d G "CLC_INPUT_PWM7" 2 1154 "0x19"
d G "CLC_INPUT_NCO1" 2 1155 "0x1A"
d G "CLC_INPUT_C1OUT" 2 1156 "0x1B"
d G "CLC_INPUT_C2OUT" 2 1157 "0x1C"
d G "CLC_INPUT_ZCD" 2 1158 "0x1D"
d G "CLC_INPUT_IOCIF" 2 1159 "0x1E"
d G "CLC_INPUT_DSMOUT" 2 1160 "0x1F"
d G "CLC_INPUT_CLC1OUT" 2 1161 "0x20"
d G "CLC_INPUT_CLC2OUT" 2 1162 "0x21"
d G "CLC_INPUT_CLC3OUT" 2 1163 "0x22"
d G "CLC_INPUT_CLC4OUT" 2 1164 "0x23"
d G "CLC_INPUT_U1DT" 2 1165 "0x24"
d G "CLC_INPUT_U1TX" 2 1166 "0x25"
d G "CLC_INPUT_SDO1" 2 1167 "0x26"
d G "CLC_INPUT_SCK1" 2 1168 "0x27"
d G "CLC_INPUT_SDO2" 2 1169 "0x28"
d G "CLC_INPUT_SCK2" 2 1170 "0x29"
d G "CLC_INPUT_CWG1A" 2 1171 "0x2A"
d G "CLC_INPUT_CWG1B" 2 1172 "0x2B"
d G "CLC_INPUT_CWG2A" 2 1173 "0x2C"
d G "CLC_INPUT_CWG2B" 2 1174 "0x2D"
d G "CLC_INPUT_CWG3A" 2 1175 "0x2E"
d G "CLC_INPUT_CWG3B" 2 1176 "0x2F"
d G "CLC_GATE_AND" 2 1181 "0x155"
d G "CLC_GATE_NAND" 2 1182 "0x055"
d G "CLC_GATE_NOR" 2 1183 "0x1AA"
d G "CLC_GATE_OR" 2 1184 "0x0AA"
d G "CLC_GATE_CLEAR" 2 1185 "0"
d G "CLC_GATE_SET" 2 1186 "0x100"
d G "CLC_GATE_INVERTED_INPUT_1" 2 1190 "0x001"
d G "CLC_GATE_NON_INVERTED_INPUT_1" 2 1191 "0x002"
d G "CLC_GATE_INVERTED_INPUT_2" 2 1192 "0x004"
d G "CLC_GATE_NON_INVERTED_INPUT_2" 2 1193 "0x008"
d G "CLC_GATE_INVERTED_INPUT_3" 2 1194 "0x010"
d G "CLC_GATE_NON_INVERTED_INPUT_3" 2 1195 "0x020"
d G "CLC_GATE_INVERTED_INPUT_4" 2 1196 "0x040"
d G "CLC_GATE_NON_INVERTED_INPUT_4" 2 1197 "0x080"
d G "CLC_GATE_OUTPUT_INVERTED" 2 1198 "0x100"
c L "clc4_setup_gate" 2 3 4 "FUNCTION"
f N "setup_crc" 2 1209 ""
v L "poly_terms" 2 1209 "int8" `346 
f B "setup_crc" 2 1209 "void(int8 poly_terms,*int8 _VA_LIST)" `345 
f N "crc_init" 2 1210 ""
v L "value" 2 1210 "int16" `349 
f B "crc_init" 2 1210 "void(int16 value)" `348 
f N "crc_calc16" 2 1211 ""
v L "data" 2 1211 "int16" `351 
f B "crc_calc16" 2 1211 "int16(int16 data)" `350 
f N "crc_calc16" 2 1212 ""
v L "data" 2 1212 "int16" `353 
v L "data_width" 2 1212 "int8" `354 
f B "crc_calc16" 2 1212 "int16(int16 data,int8 data_width)" `352 
f N "crc_calc16" 2 1213 ""
v L "ptr" 2 1213 "*int16" `356 
v L "count" 2 1213 "int16" `357 
f B "crc_calc16" 2 1213 "int16(*int16 ptr,int16 count)" `355 
f N "crc_calc16" 2 1214 ""
v L "ptr" 2 1214 "*int16" `359 
v L "count" 2 1214 "int16" `360 
v L "data_width" 2 1214 "int8" `361 
f B "crc_calc16" 2 1214 "int16(*int16 ptr,int16 count,int8 data_width)" `358 
f N "crc_calc8" 2 1215 ""
v L "data" 2 1215 "int8" `363 
f B "crc_calc8" 2 1215 "int8(int8 data)" `362 
f N "crc_calc8" 2 1216 ""
v L "data" 2 1216 "int8" `365 
v L "data_width" 2 1216 "int8" `366 
f B "crc_calc8" 2 1216 "int8(int8 data,int8 data_width)" `364 
f N "crc_calc8" 2 1217 ""
v L "ptr" 2 1217 "*int8" `368 
v L "count" 2 1217 "int16" `369 
f B "crc_calc8" 2 1217 "int8(*int8 ptr,int16 count)" `367 
f N "crc_calc8" 2 1218 ""
v L "ptr" 2 1218 "*int8" `371 
v L "count" 2 1218 "int16" `372 
v L "data_width" 2 1218 "int8" `373 
f B "crc_calc8" 2 1218 "int8(*int8 ptr,int16 count,int8 data_width)" `370 
f N "crc_calc" 2 1219 ""
v L "data" 2 1219 "int16" `375 
f B "crc_calc" 2 1219 "int16(int16 data)" `374 
f N "crc_calc" 2 1220 ""
v L "data" 2 1220 "int16" `377 
v L "data_width" 2 1220 "int8" `378 
f B "crc_calc" 2 1220 "int16(int16 data,int8 data_width)" `376 
f N "crc_calc" 2 1221 ""
v L "ptr" 2 1221 "*int16" `380 
v L "count" 2 1221 "int16" `381 
f B "crc_calc" 2 1221 "int16(*int16 ptr,int16 count)" `379 
f N "crc_calc" 2 1222 ""
v L "ptr" 2 1222 "*int16" `383 
v L "count" 2 1222 "int16" `384 
v L "data_width" 2 1222 "int8" `385 
f B "crc_calc" 2 1222 "int16(*int16 ptr,int16 count,int8 data_width)" `382 
f N "crc_write" 2 1223 ""
v L "data" 2 1223 "int16" `387 
f B "crc_write" 2 1223 "void(int16 data)" `386 
f N "crc_write" 2 1224 ""
v L "data" 2 1224 "int16" `389 
v L "data_width" 2 1224 "int8" `390 
f B "crc_write" 2 1224 "void(int16 data,int8 data_width)" `388 
f N "crc_read" 2 1225 ""
f B "crc_read" 2 1225 "int16()" `391  "Constants used in setup_crc() are:"
d G "CRC_LITTLE_ENDIAN" 2 1227 "128"
c L "crc_read" 2 3 5 "FUNCTION"
f N "setup_smt1" 2 1234 ""
v L "mode" 2 1234 "int32" `393 
f B "setup_smt1" 2 1234 "void(int32 mode)" `392 
f N "setup_smt1" 2 1235 ""
v L "mode" 2 1235 "int32" `395 
v L "period" 2 1235 "int32" `396 
f B "setup_smt1" 2 1235 "void(int32 mode,int32 period)" `394 
f N "smt1_status" 2 1236 ""
f B "smt1_status" 2 1236 "int8()" `397 
f N "smt1_start" 2 1237 ""
f B "smt1_start" 2 1237 "void()" `398 
f N "smt1_stop" 2 1238 ""
f B "smt1_stop" 2 1238 "void()" `399 
f N "smt1_update" 2 1239 ""
v L "which" 2 1239 "int8" `401 
f B "smt1_update" 2 1239 "void(int8 which)" `400 
f N "smt1_reset_timer" 2 1240 ""
f B "smt1_reset_timer" 2 1240 "void()" `402 
f N "smt1_read" 2 1241 ""
v L "which" 2 1241 "int8" `404 
f B "smt1_read" 2 1241 "int32(int8 which)" `403 
f N "smt1_write" 2 1242 ""
v L "which" 2 1242 "int8" `406 
v L "value" 2 1242 "int32" `407 
f B "smt1_write" 2 1242 "void(int8 which,int32 value)" `405 
f N "setup_smt2" 2 1243 ""
v L "mode" 2 1243 "int32" `409 
f B "setup_smt2" 2 1243 "void(int32 mode)" `408 
f N "setup_smt2" 2 1244 ""
v L "mode" 2 1244 "int32" `411 
v L "period" 2 1244 "int32" `412 
f B "setup_smt2" 2 1244 "void(int32 mode,int32 period)" `410 
f N "smt2_status" 2 1245 ""
f B "smt2_status" 2 1245 "int8()" `413 
f N "smt2_start" 2 1246 ""
f B "smt2_start" 2 1246 "void()" `414 
f N "smt2_stop" 2 1247 ""
f B "smt2_stop" 2 1247 "void()" `415 
f N "smt2_update" 2 1248 ""
v L "which" 2 1248 "int8" `417 
f B "smt2_update" 2 1248 "void(int8 which)" `416 
f N "smt2_reset_timer" 2 1249 ""
f B "smt2_reset_timer" 2 1249 "void()" `418 
f N "smt2_read" 2 1250 ""
v L "which" 2 1250 "int8" `420 
f B "smt2_read" 2 1250 "int32(int8 which)" `419 
f N "smt2_write" 2 1251 ""
v L "which" 2 1251 "int8" `422 
v L "value" 2 1251 "int32" `423 
f B "smt2_write" 2 1251 "void(int8 which,int32 value)" `421  "Constants used in SETUP_SMTx() are:"
d G "SMT_ENABLED" 2 1253 "0x80"
d G "SMT_DISABLED" 2 1254 "0"
d G "SMT_TMR_NO_ROLLOVER" 2 1256 "0x20"
d G "SMT_TMR_ROLLSOVER" 2 1257 "0"
d G "SMT_WIN_ACTIVE_LOW" 2 1259 "0x10"
d G "SMT_WIN_ACTIVE_HIGH" 2 1260 "0"
d G "SMT_SIG_ACTIVE_LOW" 2 1262 "0x08"
d G "SMT_SIG_ACTIVE_HIGH" 2 1263 "0"
d G "SMT_TMR_INCREMENTS_ON_FE" 2 1265 "0x04"
d G "SMT_TMR_INCREMENTS_ON_RE" 2 1266 "0"
d G "SMT_DIV_BY_8" 2 1268 "0x03"
d G "SMT_DIV_BY_4" 2 1269 "0x02"
d G "SMT_DIV_BY_2" 2 1270 "0x01"
d G "SMT_DIV_BY_1" 2 1271 "0"
d G "SMT_REPEAT_DATA_ACQ_MODE" 2 1273 "0x4000"
d G "SMT_SINGLE_DATA_ACQ_MODE" 2 1274 "0"
d G "SMT_MODE_WINDOWED_COUNTER" 2 1276 "0x0A00"
d G "SMT_MODE_GATED_COUNTER" 2 1277 "0x0900"
d G "SMT_MODE_COUNTER" 2 1278 "0x0800"
d G "SMT_MODE_CAPTURE" 2 1279 "0x0700"
d G "SMT_MODE_TIME_OF_FLIGHT" 2 1280 "0x0600"
d G "SMT_MODE_GATED_WINDOWED_MEASURE" 2 1281 "0x0500"
d G "SMT_MODE_WINDOWED_MEASURE" 2 1282 "0x0400"
d G "SMT_MODE_HIGH_LOW_TIME_MEASUREMENT" 2 1283 "0x0300"
d G "SMT_MODE_PERIOD_DUTY_CYCLE_ACQ" 2 1284 "0x0200"
d G "SMT_MODE_GATED_TIMER" 2 1285 "0x0100"
d G "SMT_MODE_TIMER" 2 1286 "0"
d G "SMT_CLK_CLKR" 2 1288 "0x070000"
d G "SMT_CLK_SOSC" 2 1289 "0x060000"
d G "SMT_CLK_31250" 2 1290 "0x050000" "MFINTOSC/16"
d G "SMT_CLK_500000" 2 1291 "0x040000" "MFINTOSC"
d G "SMT_CLK_31000" 2 1292 "0x030000" "LFINTOSC"
d G "SMT_CLK_HFINTOSC" 2 1293 "0x020000" "16MHz"
d G "SMT_CLK_FOSC_DIV_4" 2 1294 "0"
d G "SMT_WIN_INPUT_CLC4" 2 1296 "0x87000000"
d G "SMT_WIN_INPUT_CLC3" 2 1297 "0x86000000"
d G "SMT_WIN_INPUT_CLC2" 2 1298 "0x85000000"
d G "SMT_WIN_INPUT_CLC1" 2 1299 "0x84000000"
d G "SMT_WIN_INPUT_ZCD1" 2 1300 "0x83000000"
d G "SMT_WIN_INPUT_COMP2" 2 1301 "0x82000000"
d G "SMT_WIN_INPUT_COMP1" 2 1302 "0x81000000"
d G "SMT_WIN_INPUT_PWM7" 2 1303 "0x80000000"
d G "SMT_WIN_INPUT_PWM6" 2 1304 "0x0F000000"
d G "SMT_WIN_INPUT_CCP5" 2 1305 "0x0E000000"
d G "SMT_WIN_INPUT_CCP4" 2 1306 "0x0D000000"
d G "SMT_WIN_INPUT_CCP3" 2 1307 "0x0C000000"
d G "SMT_WIN_INPUT_CCP2" 2 1308 "0x0B000000"
d G "SMT_WIN_INPUT_CCP1" 2 1309 "0x0A000000"
d G "SMT_WIN_INPUT_SMT2" 2 1310 "0x09000000"
d G "SMT_WIN_INPUT_SMT1" 2 1311 "0x08000000"
d G "SMT_WIN_INPUT_TMR6" 2 1312 "0x07000000"
d G "SMT_WIN_INPUT_TMR4" 2 1313 "0x06000000"
d G "SMT_WIN_INPUT_TMR2" 2 1314 "0x05000000"
d G "SMT_WIN_INPUT_TMR0" 2 1315 "0x04000000"
d G "SMT_WIN_INPUT_SOSC" 2 1316 "0x03000000"
d G "SMT_WIN_INPUT_MFINTOSC_DIV_16" 2 1317 "0x02000000"
d G "SMT_WIN_INPUT_LFINTOSC" 2 1318 "0x01000000"
d G "SMT_WIN_INPUT_SMTWINx" 2 1319 "0"
d G "SMT_SIG_INPUT_CLC4" 2 1321 "0x00300000"
d G "SMT_SIG_INPUT_CLC3" 2 1322 "0x70200000"
d G "SMT_SIG_INPUT_CLC2" 2 1323 "0x60200000"
d G "SMT_SIG_INPUT_CLC1" 2 1324 "0x50200000"
d G "SMT_SIG_INPUT_ZCD1" 2 1325 "0x40200000"
d G "SMT_SIG_INPUT_COMP2" 2 1326 "0x30200000"
d G "SMT_SIG_INPUT_COMP1" 2 1327 "0x20200000"
d G "SMT_SIG_INPUT_NCO" 2 1328 "0x10200000"
d G "SMT_SIG_INPUT_PWM7" 2 1329 "0x00200000"
d G "SMT_SIG_INPUT_PWM6" 2 1330 "0x70100000"
d G "SMT_SIG_INPUT_CCP5" 2 1331 "0x60100000"
d G "SMT_SIG_INPUT_CCP4" 2 1332 "0x50100000"
d G "SMT_SIG_INPUT_CCP3" 2 1333 "0x40100000"
d G "SMT_SIG_INPUT_CCP2" 2 1334 "0x30100000"
d G "SMT_SIG_INPUT_CCP1" 2 1335 "0x20100000"
d G "SMT_SIG_INPUT_SMT2" 2 1336 "0x10100000"
d G "SMT_SIG_INPUT_SMT1" 2 1337 "0x00100000"
d G "SMT_SIG_INPUT_TMR6" 2 1338 "0x70000000"
d G "SMT_SIG_INPUT_TMR5" 2 1339 "0x60000000"
d G "SMT_SIG_INPUT_TMR4" 2 1340 "0x50000000"
d G "SMT_SIG_INPUT_TMR3" 2 1341 "0x40000000"
d G "SMT_SIG_INPUT_TMR2" 2 1342 "0x30000000"
d G "SMT_SIG_INPUT_TMR1" 2 1343 "0x20000000"
d G "SMT_SIG_INPUT_TMR0" 2 1344 "0x10000000"
d G "SMT_SIG_INPUT_SMTSIGx" 2 1345 "0"
d G "SMT_START_NOW" 2 1347 "0x8000"
d G "SMT_CAPTURED_PERIOD_REG" 2 1350 "0"
d G "SMT_CAPTURED_PULSE_WIDTH_REG" 2 1351 "1"
d G "SMT_TMR_REG" 2 1353 "2"
d G "SMT_PERIOD_REG" 2 1354 "3"
d G "SMT_TIMER_IS_RUNNING" 2 1357 "0x04"
d G "SMT_WINDOW_IS_OPEN" 2 1358 "0x02"
d G "SMT_ACQ_IN_PROGRESS" 2 1359 "0x01"
c L "smt2_write" 2 3 3 "FUNCTION"
f N "setup_zcd" 2 1364 ""
v L "mode" 2 1364 "int8" `425 
f B "setup_zcd" 2 1364 "void(int8 mode)" `424 
f N "zcd_status" 2 1365 ""
f B "zcd_status" 2 1365 "int8()" `426  "Constants used in SETUP_ZCD() are:"
d G "ZCD_ENABLE" 2 1367 "0x80"
d G "ZCD_DISABLE" 2 1368 "0"
d G "ZCD_INVERTED" 2 1370 "0x10"
d G "ZCD_INT_L_TO_H" 2 1371 "0x02"
d G "ZCD_INT_H_TO_L" 2 1372 "0x01"
d G "ZCD_IS_SINKING" 2 1375 "0x20" "If ZCD_INVERTED is used the return"
d G "ZCD_IS_SOURCING" 2 1376 "0" "value will be reversed."
c L "zcd_status" 2 3 3 "FUNCTION"
f N "setup_dsm" 2 1381 ""
v L "enable" 2 1381 "int8" `428 
f B "setup_dsm" 2 1381 "void(int8 enable)" `427 
f N "setup_dsm" 2 1382 ""
v L "mode" 2 1382 "int16" `430 
v L "source" 2 1382 "int8" `431 
f B "setup_dsm" 2 1382 "void(int16 mode,int8 source)" `429 
f N "setup_dsm" 2 1383 ""
v L "mode" 2 1383 "int16" `433 
v L "source" 2 1383 "int8" `434 
v L "carrier" 2 1383 "int16" `435 
f B "setup_dsm" 2 1383 "void(int16 mode,int8 source,int16 carrier)" `432  "Constants used in SETUP_DSM() first parameter are:"
d G "DSM_ENABLED" 2 1385 "0x80"
d G "DSM_DISABLED" 2 1386 "0x00"
d G "DSM_OUTPUT_INVERTED" 2 1388 "0x10"
d G "DSM_SYNC_CARRIER_LOW" 2 1389 "0x0100"
d G "DSM_INVERT_CARRIER_LOW" 2 1390 "0x0200"
d G "DSM_SYNC_CARRIER_HIGH" 2 1391 "0x1000"
d G "DSM_INVERT_CARRIER_HIGH" 2 1392 "0x2000"
d G "DSM_SOURCE_MDSRC" 2 1394 "0x00"
d G "DSM_SOURCE_MANUAL" 2 1395 "0x01"
d G "DSM_SOURCE_CCP1" 2 1396 "0x02"
d G "DSM_SOURCE_CCP2" 2 1397 "0x03"
d G "DSM_SOURCE_CCP3" 2 1398 "0x04"
d G "DSM_SOURCE_CCP4" 2 1399 "0x05"
d G "DSM_SOURCE_CCP5" 2 1400 "0x06"
d G "DSM_SOURCE_PWM6" 2 1401 "0x07"
d G "DSM_SOURCE_PWM7" 2 1402 "0x08"
d G "DSM_SOURCE_NCO" 2 1403 "0x09"
d G "DSM_SOURCE_C1OUT" 2 1404 "0x0A"
d G "DSM_SOURCE_C2OUT" 2 1405 "0x0B"
d G "DSM_SOURCE_CLC1" 2 1406 "0x0C"
d G "DSM_SOURCE_CLC2" 2 1407 "0x0D"
d G "DSM_SOURCE_CLC3" 2 1408 "0x0E"
d G "DSM_SOURCE_CLC4" 2 1409 "0x0F"
d G "DSM_SOURCE_U1DT" 2 1410 "0x10"
d G "DSM_SOURCE_U1TX" 2 1411 "0x11"
d G "DSM_SOURCE_SDO1" 2 1412 "0x12"
d G "DSM_SOURCE_SDO2" 2 1413 "0x13"
d G "DSM_CARRIER_LOW_MDCARL" 2 1415 "0x0000"
d G "DSM_CARRIER_LOW_SYSTEM_CLOCK" 2 1416 "0x0001"
d G "DSM_CARRIER_LOW_HFINTOSC" 2 1417 "0x0002"
d G "DSM_CARRIER_LOW_CLKR" 2 1418 "0x0003"
d G "DSM_CARRIER_LOW_CCP1" 2 1419 "0x0004"
d G "DSM_CARRIER_LOW_CCP2" 2 1420 "0x0005"
d G "DSM_CARRIER_LOW_CCP3" 2 1421 "0x0006"
d G "DSM_CARRIER_LOW_CCP4" 2 1422 "0x0007"
d G "DSM_CARRIER_LOW_CCP5" 2 1423 "0x0008"
d G "DSM_CARRIER_LOW_PWM6" 2 1424 "0x0009"
d G "DSM_CARRIER_LOW_PWM7" 2 1425 "0x000A"
d G "DSM_CARRIER_LOW_NCO" 2 1426 "0x000B"
d G "DSM_CARRIER_LOW_CLC1" 2 1427 "0x000C"
d G "DSM_CARRIER_LOW_CLC2" 2 1428 "0x000D"
d G "DSM_CARRIER_LOW_CLC3" 2 1429 "0x000E"
d G "DSM_CARRIER_LOW_CLC4" 2 1430 "0x000F"
d G "DSM_CARRIER_HIGH_MDCARH" 2 1431 "0x0000"
d G "DSM_CARRIER_HIGH_SYSTEM_CLOCK" 2 1432 "0x0100"
d G "DSM_CARRIER_HIGH_HFINTOSC" 2 1433 "0x0200"
d G "DSM_CARRIER_HIGH_CLKR" 2 1434 "0x0300"
d G "DSM_CARRIER_HIGH_CCP1" 2 1435 "0x0400"
d G "DSM_CARRIER_HIGH_CCP2" 2 1436 "0x0500"
d G "DSM_CARRIER_HIGH_CCP3" 2 1437 "0x0600"
d G "DSM_CARRIER_HIGH_CCP4" 2 1438 "0x0700"
d G "DSM_CARRIER_HIGH_CCP5" 2 1439 "0x0800"
d G "DSM_CARRIER_HIGH_PWM6" 2 1440 "0x0900"
d G "DSM_CARRIER_HIGH_PWM7" 2 1441 "0x0A00"
d G "DSM_CARRIER_HIGH_NCO" 2 1442 "0x0B00"
d G "DSM_CARRIER_HIGH_CLC1" 2 1443 "0x0C00"
d G "DSM_CARRIER_HIGH_CLC2" 2 1444 "0x0D00"
d G "DSM_CARRIER_HIGH_CLC3" 2 1445 "0x0E00"
d G "DSM_CARRIER_HIGH_CLC4" 2 1446 "0x0F00"
c L "setup_dsm" 2 3 2 "FUNCTION"
f N "setup_oscillator" 2 1454 ""
v L "mode" 2 1454 "int32" `439 
f B "setup_oscillator" 2 1454 "int16(int32 mode)" `438 
f N "setup_oscillator" 2 1455 ""
v L "mode" 2 1455 "int32" `441 
v L "tune" 2 1455 "sint8" `442 
f B "setup_oscillator" 2 1455 "int16(int32 mode,sint8 tune)" `440  "Constants used in setup_oscillator() are:"
d G "OSC_HFINTRC_1MHZ" 2 1458 "0x00000060"
d G "OSC_HFINTRC_2MHZ" 2 1459 "0x00000160"
d G "OSC_HFINTRC_4MHZ" 2 1460 "0x00000260"
d G "OSC_HFINTRC_8MHZ" 2 1461 "0x00000360"
d G "OSC_HFINTRC_12MHZ" 2 1462 "0x00000460"
d G "OSC_HFINTRC_16MHZ" 2 1463 "0x00000560"
d G "OSC_HFINTRC_24MHZ" 2 1464 "0x00000410"
d G "OSC_HFINTRC_32MHZ" 2 1465 "0x00000660"
d G "OSC_EXTOSC_PLL" 2 1466 "0x00000020"
d G "OSC_SOSC" 2 1467 "0x00000040"
d G "OSC_LFINTRC" 2 1468 "0x00000050"
d G "OSC_EXTOSC" 2 1469 "0x00000070"
d G "OSC_CLK_DIV_BY_1" 2 1471 "0x00000000"
d G "OSC_CLK_DIV_BY_2" 2 1472 "0x00000001"
d G "OSC_CLK_DIV_BY_4" 2 1473 "0x00000002"
d G "OSC_CLK_DIV_BY_8" 2 1474 "0x00000003"
d G "OSC_CLK_DIV_BY_16" 2 1475 "0x00000004"
d G "OSC_CLK_DIV_BY_32" 2 1476 "0x00000005"
d G "OSC_CLK_DIV_BY_64" 2 1477 "0x00000006"
d G "OSC_CLK_DIV_BY_128" 2 1478 "0x00000007"
d G "OSC_CLK_DIV_BY_256" 2 1479 "0x00000008"
d G "OSC_CLK_DIV_BY_512" 2 1480 "0x00000009"
d G "OSC_SOSC_PWR_LOW" 2 1482 "0x00000000"
d G "OSC_SOSC_PWR_HIGH" 2 1483 "0x00400000"
d G "OSC_CLOCK_SWITCH_HOLD" 2 1485 "0x00800000"
d G "OSC_ADOSC_ENABLED" 2 1486 "0x04000000"
d G "OSC_SOSC_ENABLED" 2 1487 "0x08000000"
d G "OSC_LFINTRC_ENABLED" 2 1488 "0x10000000"
d G "OSC_MFINTRC_ENABLED" 2 1489 "0x20000000"
d G "OSC_HFINTRC_ENABLED" 2 1490 "0x40000000"
d G "OSC_EXTOSC_ENABLED" 2 1491 "0x80000000"
d G "OSC_PLL_READY" 2 1495 "0x0001"
d G "OSC_ADCRC_READY" 2 1496 "0x0004"
d G "OSC_SOSC_READY" 2 1497 "0x0008"
d G "OSC_LFINTRC_READY" 2 1498 "0x0010"
d G "OSC_MFINTRC_READY" 2 1499 "0x0020"
d G "OSC_HFINTRC_READY" 2 1500 "0x0040"
d G "OSC_EXTOSC_READY" 2 1501 "0x0080"
d G "OSC_CLOCK_SWITCH_IN_PROGRESS" 2 1502 "0x0800"
d G "OSC_CLOCK_SWITCH_COMPLETE" 2 1503 "0x1000"
c L "setup_oscillator" 2 3 4 "FUNCTION"
f N "setup_adc" 2 1510 ""
v L "mode" 2 1510 "int32" `444 
f B "setup_adc" 2 1510 "void(int32 mode)" `443 
f N "setup_adc" 2 1511 ""
v L "mode" 2 1511 "int32" `446 
v L "ADCRS" 2 1511 "int8" `447 
v L "ADRPT" 2 1511 "int8" `448 
f B "setup_adc" 2 1511 "void(int32 mode,int8 ADCRS,int8 ADRPT)" `445 
f N "set_adc_trigger" 2 1512 ""
v L "trigger" 2 1512 "int8" `450 
f B "set_adc_trigger" 2 1512 "void(int8 trigger)" `449 
f N "read_adc" 2 1513 ""
f B "read_adc" 2 1513 "int8()" `451 
f N "read_adc" 2 1514 ""
v L "mode" 2 1514 "int8" `453 
f B "read_adc" 2 1514 "int8(int8 mode)" `452 
f N "read_adc" 2 1515 ""
f G "read_adc" 2 1515 "int16()" `454 
f N "read_adc" 2 1516 ""
v L "mode" 2 1516 "int8" `455 
f G "read_adc" 2 1516 "int16(int8 mode,int8 which)" `454 
f N "adc_done" 2 1517 ""
f B "adc_done" 2 1517 "int8(int8 mode,int8 which)" `454 
f N "adc_read" 2 1518 ""
v L "which" 2 1518 "int8" `456 
f B "adc_read" 2 1518 "int8(int8 which)" `455 
f N "adc_read" 2 1519 ""
v L "which" 2 1519 "int8" `458 
f G "adc_read" 2 1519 "int16(int8 which,int8 value)" `457 
f N "adc_write" 2 1520 ""
v L "which" 2 1520 "int8" `458 
v L "value" 2 1520 "int8" `459 
f B "adc_write" 2 1520 "void(int8 which,int8 value)" `457 
f N "adc_write" 2 1521 ""
v L "which" 2 1521 "int8" `461 
v L "value" 2 1521 "int16" `462 
f B "adc_write" 2 1521 "void(int8 which,int16 value)" `460 
f N "adc_status" 2 1522 ""
f B "adc_status" 2 1522 "int8()" `463  "Constants used for SETUP_ADC() first parameter are:"
d G "ADC_LEGACY_MODE" 2 1524 "0"
d G "ADC_ACCUMULATE_MODE" 2 1525 "0x00010000"
d G "ADC_AVERAGE_MODE" 2 1526 "0x00020000"
d G "ADC_BURST_AVERAGE_MODE" 2 1527 "0x00030000"
d G "ADC_LOW_PASS_FILTER_MODE" 2 1528 "0x00040000"
d G "ADC_OFF" 2 1529 "0x80000000"
d G "ADC_CLOCK_DIV_2" 2 1536 "0"
d G "ADC_CLOCK_DIV_4" 2 1537 "0x00000001"
d G "ADC_CLOCK_DIV_8" 2 1538 "0x00000003"
d G "ADC_CLOCK_DIV_16" 2 1539 "0x00000007"
d G "ADC_CLOCK_DIV_32" 2 1540 "0x0000000F"
d G "ADC_CLOCK_DIV_64" 2 1541 "0x0000001F"
d G "ADC_CLOCK_DIV_128" 2 1542 "0x0000003F"
d G "ADC_CLOCK_INTERNAL" 2 1543 "0x00000080"
d G "ADC_TAD_MUL_0" 2 1550 "0x0000FF00"
d G "ADC_TAD_MUL_2" 2 1551 "0x0000FD00"
d G "ADC_TAD_MUL_4" 2 1552 "0x0000FB00"
d G "ADC_TAD_MUL_8" 2 1553 "0x0000F700"
d G "ADC_TAD_MUL_16" 2 1554 "0x0000EF00"
d G "ADC_TAD_MUL_32" 2 1555 "0x0000DF00"
d G "ADC_TAD_MUL_64" 2 1556 "0x0000BF00"
d G "ADC_TAD_MUL_128" 2 1557 "0x00007F00"
d G "ADC_TAD_MUL_255" 2 1558 "0"
d G "ADC_ADFLTR_TO_ADPREV_AT_START" 2 1560 "0"
d G "ADC_ADRES_TO_ADPREV_AT_START" 2 1561 "0x00800000"
d G "ADC_THRESHOLD_INT_DISABLED" 2 1563 "0"
d G "ADC_THRESHOLD_INT_ADERR_LT_ADLTH" 2 1564 "0x01000000"
d G "ADC_THRESHOLD_INT_ADERR_GTE_ADLTH" 2 1565 "0x02000000"
d G "ADC_THRESHOLD_INT_ADERR_GT_ADLTH_AND_LT_ADUTH" 2 1566 "0x03000000"
d G "ADC_THRESHOLD_INT_ADERR_LT_ATLTH_OR_GT_ADUTH" 2 1567 "0x04000000"
d G "ADC_THRESHOLD_INT_ADERR_LTE_ADUTH" 2 1568 "0x05000000"
d G "ADC_THRESHOLD_INT_ADERR_GT_ADUTH" 2 1569 "0x06000000"
d G "ADC_THRESHOLD_INT_END_OF_CALCULATION" 2 1570 "0x07000000"
d G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADPREV" 2 1572 "0"
d G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADSTPT" 2 1573 "0x10000000"
d G "ADC_ERR_CALC_MODE_ADRES_MINUS_ADFLTR" 2 1574 "0x20000000"
d G "ADC_ERR_CALC_MODE_ADPREV_MINUS_ADFLTR" 2 1575 "0x40000000"
d G "ADC_ERR_CALC_MODE_ADFLTR_MINUS_ADSTPT" 2 1576 "0x50000000"
d G "ADC_CONTINUOUS_OPERATION_ENABLED" 2 1578 "0x00000040"
d G "ADC_STOP_WHEN_THRESHOLD_CONDITIONS_MET" 2 1579 "0x08000000" "If Continuous Operation is enabled"
d G "ADC_RESULT" 2 1594 "0"
d G "ADC_PREV_RESULT" 2 1595 "1"
d G "ADC_ACCUMULATOR" 2 1596 "2"
d G "ADC_FILTER" 2 1597 "3"
d G "ADC_ERROR" 2 1598 "4"
d G "ADC_COUNT" 2 1599 "5"
d G "ADC_REPEAT" 2 1600 "6"
d G "ADC_SET_POINT" 2 1601 "7"
d G "ADC_LOWER_THRESHOLD" 2 1602 "8"
d G "ADC_UPPER_THRESHOLD" 2 1603 "9"
d G "ADC_TRIGGER_DISABLED" 2 1606 "0" "External trigger disabled, use read_adc() to start conversion"
d G "ADC_TRIGGER_ADACT_PIN" 2 1607 "0x01"
d G "ADC_TRIGGER_TIMER0" 2 1608 "0x02"
d G "ADC_TRIGGER_TIMER1" 2 1609 "0x03"
d G "ADC_TRIGGER_TIMER2" 2 1610 "0x04"
d G "ADC_TRIGGER_TIMER3" 2 1611 "0x05"
d G "ADC_TRIGGER_TIMER4" 2 1612 "0x06"
d G "ADC_TRIGGER_TIMER5" 2 1613 "0x07"
d G "ADC_TRIGGER_TIMER6" 2 1614 "0x08"
d G "ADC_TRIGGER_SMT1" 2 1615 "0x09"
d G "ADC_TRIGGER_SMT2" 2 1616 "0x0A"
d G "ADC_TRIGGER_CCP1" 2 1617 "0x0B"
d G "ADC_TRIGGER_CCP2" 2 1618 "0x0C"
d G "ADC_TRIGGER_CCP3" 2 1619 "0x0D"
d G "ADC_TRIGGER_CCP4" 2 1620 "0x0E"
d G "ADC_TRIGGER_CCP5" 2 1621 "0x0F"
d G "ADC_TRIGGER_PWM6" 2 1622 "0x10"
d G "ADC_TRIGGER_PWM7" 2 1623 "0x11"
d G "ADC_TRIGGER_COMP1" 2 1624 "0x12"
d G "ADC_TRIGGER_COMP2" 2 1625 "0x13"
d G "ADC_TRIGGER_IOC" 2 1626 "0x14"
d G "ADC_TRIGGER_CLC1" 2 1627 "0x15"
d G "ADC_TRIGGER_CLC2" 2 1628 "0x16"
d G "ADC_TRIGGER_CLC3" 2 1629 "0x17"
d G "ADC_TRIGGER_CLC4" 2 1630 "0x18"
d G "ADC_TRIGGER_ADERR" 2 1631 "0x1C" "Read of ADERR register"
d G "ADC_TRIGGER_ADRESH" 2 1632 "0x1D" "Read of ADRESH register"
d G "ADC_TRIGGER_ADPCH" 2 1633 "0x1F" "Read of ADPCH register"
d G "ADC_OVERFLOWED" 2 1636 "0x80"
d G "ADC_GT_UPPER_THRESHOLD" 2 1637 "0x40"
d G "ADC_LT_LOWER_THRESHOLD" 2 1638 "0x20"
d G "ADC_UPDATING" 2 1639 "0x10"
c L "adc_status" 2 3 3 "FUNCTION"
c L "adc_status" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 1647 ""
v L "pins" 2 1647 "int32" `466 
f B "setup_adc_ports" 2 1647 "void(int32 pins)" `465 
f N "setup_adc_ports" 2 1648 ""
v L "pins" 2 1648 "int32" `468 
v L "reference" 2 1648 "int32" `469 
f B "setup_adc_ports" 2 1648 "void(int32 pins,int32 reference)" `467 
f N "set_analog_pins" 2 1649 ""
v L "pin" 2 1649 "int8" `471 
f B "set_analog_pins" 2 1649 "void(int8 pin,*int8 _VA_LIST)" `470 
f N "setup_adc_reference" 2 1650 ""
v L "reference" 2 1650 "int32" `474 
f B "setup_adc_reference" 2 1650 "void(int32 reference)" `473 
f N "set_adc_channel" 2 1651 ""
v L "channel" 2 1651 "int8" `476 
f B "set_adc_channel" 2 1651 "void(int8 channel)" `475  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 1655 "0x01000000" "| A0"
d G "sAN1" 2 1656 "0x02000000" "| A1"
d G "sAN2" 2 1657 "0x04000000" "| A2"
d G "sAN3" 2 1658 "0x08000000" "| A3"
d G "sAN4" 2 1659 "0x10000000" "| A4"
d G "sAN5" 2 1660 "0x20000000" "| A5"
d G "sAN6" 2 1661 "0x40000000" "| A6"
d G "sAN7" 2 1662 "0x80000000" "| A7"
d G "sAN8" 2 1663 "0x00010000" "| B0"
d G "sAN9" 2 1664 "0x00020000" "| B1"
d G "sAN10" 2 1665 "0x00040000" "| B2"
d G "sAN11" 2 1666 "0x00080000" "| B3"
d G "sAN12" 2 1667 "0x00100000" "| B4"
d G "sAN13" 2 1668 "0x00200000" "| B5"
d G "sAN14" 2 1669 "0x00400000" "| B6"
d G "sAN15" 2 1670 "0x00800000" "| B7"
d G "sAN16" 2 1671 "0x00000100" "| C0"
d G "sAN17" 2 1672 "0x00000200" "| C1"
d G "sAN18" 2 1673 "0x00000400" "| C2"
d G "sAN19" 2 1674 "0x00000800" "| C3"
d G "sAN20" 2 1675 "0x00001000" "| C4"
d G "sAN21" 2 1676 "0x00002000" "| C5"
d G "sAN22" 2 1677 "0x00004000" "| C6"
d G "sAN23" 2 1678 "0x00008000" "| C7"
d G "NO_ANALOGS" 2 1679 "0" "None"
d G "ALL_ANALOG" 2 1680 "0xFFFFFF00" "A0 A1 A2 A3 A4 A5 A6 A7 B0 B1 B2 B3 B4 B5 B6 B7 C0 C1 C2 C3 C4 C5 C6 C7"
d G "VSS_VDD" 2 1683 "0x00000000" "| Range 0-Vdd"
d G "VSS_VREF" 2 1684 "0x00000002" "| Range 0-VrefH"
d G "VSS_FVR" 2 1685 "0x00000003" "| Range 0-Fixed Voltage Reference"
d G "VREF_VDD" 2 1686 "0x00000010" "| Range VrefL-Vdd"
d G "VREF_VREF" 2 1687 "0x00000012" "| Range VrefL-VrefH"
d G "VREF_FVR" 2 1688 "0x00000013" "| Range VrefL-Fixed Voltage Reference"
d G "AVSS_CHANNEL" 2 1692 "0x3C"
d G "TEMPERATURE_INDICATOR" 2 1693 "0x3D"
d G "DAC_CHANNEL" 2 1694 "0x3E"
d G "FVR_CHANNEL" 2 1695 "0x3F"
d G "ADC_START_AND_READ" 2 1698 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 1699 "1"
d G "ADC_READ_ONLY" 2 1700 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 1706 ""
v L "x" 2 1706 "sint8" `478 
f B "abs" 2 1706 "sint8(sint8 x)" `477 
f N "abs" 2 1707 ""
v L "x" 2 1707 "sint16" `480 
f B "abs" 2 1707 "sint16(sint16 x)" `479 
f N "abs" 2 1708 ""
v L "x" 2 1708 "sint32" `482 
f B "abs" 2 1708 "sint32(sint32 x)" `481 
f N "abs" 2 1709 ""
v L "x" 2 1709 "float" `484 
f B "abs" 2 1709 "float(float x)" `483 
f N "_mul" 2 1710 ""
v L "??65535" 2 1710 "int8" `486 
v L "??65535" 2 1710 "int8" `487 
f B "_mul" 2 1710 "int16(int8 ,int8 )" `485 
f N "_mul" 2 1711 ""
v L "??65535" 2 1711 "sint8" `489 
v L "??65535" 2 1711 "sint8" `490 
f B "_mul" 2 1711 "sint16(sint8 ,sint8 )" `488 
f N "_mul" 2 1712 ""
v L "??65535" 2 1712 "int16" `492 
v L "??65535" 2 1712 "int16" `493 
f B "_mul" 2 1712 "int32(int16 ,int16 )" `491 
f N "_mul" 2 1713 ""
v L "??65535" 2 1713 "sint16" `495 
v L "??65535" 2 1713 "sint16" `496 
f B "_mul" 2 1713 "sint32(sint16 ,sint16 )" `494  "Memory Manipulation Prototypes:"
f N "read_bank" 2 1716 ""
v L "bank" 2 1716 "int8" `498 
v L "offset" 2 1716 "int8" `499 
f B "read_bank" 2 1716 "int8(int8 bank,int8 offset)" `497 
f N "write_bank" 2 1717 ""
v L "bank" 2 1717 "int8" `501 
v L "offset" 2 1717 "int8" `502 
v L "value" 2 1717 "int8" `503 
f B "write_bank" 2 1717 "void(int8 bank,int8 offset,int8 value)" `500 
f N "strcpy" 2 1718 ""
v L "dest" 2 1718 "*int8" `505 
v L "src" 2 1718 "*int8" `506 
f B "strcpy" 2 1718 "void(*int8 dest,*int8 src)" `504 
f N "memset" 2 1719 ""
v L "destination" 2 1719 "*int8" `508 
v L "value" 2 1719 "int8" `509 
v L "num" 2 1719 "int16" `510 
f B "memset" 2 1719 "void(*int8 destination,int8 value,int16 num)" `507 
f N "memcpy" 2 1720 ""
v L "destination" 2 1720 "*int8" `512 
v L "source" 2 1720 "*int8" `513 
v L "num" 2 1720 "int16" `514 
f B "memcpy" 2 1720 "void(*int8 destination,*int8 source,int16 num)" `511  "String Prototypes:"
f N "toupper" 2 1723 ""
v L "cvalue" 2 1723 "int8" `516 
f B "toupper" 2 1723 "int8(int8 cvalue)" `515 
f N "tolower" 2 1724 ""
v L "cvalue" 2 1724 "int8" `518 
f B "tolower" 2 1724 "int8(int8 cvalue)" `517 
f N "sprintf" 2 1725 ""
v L "string" 2 1725 "*int8" `520 
v L "cstring" 2 1725 "*int8" `521 
f B "sprintf" 2 1725 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `519  "Data Manipulators Prototypes:"
f N "shift_left" 2 1728 ""
v L "address" 2 1728 "*int8" `524 
v L "bytes" 2 1728 "int8" `525 
v L "value" 2 1728 "int8" `526 
f B "shift_left" 2 1728 "int8(*int8 address,int8 bytes,int8 value)" `523 
f N "shift_right" 2 1729 ""
v L "address" 2 1729 "*int8" `528 
v L "bytes" 2 1729 "int8" `529 
v L "value" 2 1729 "int8" `530 
f B "shift_right" 2 1729 "int8(*int8 address,int8 bytes,int8 value)" `527 
f N "rotate_left" 2 1730 ""
v L "address" 2 1730 "*int8" `532 
v L "bytes" 2 1730 "int8" `533 
f B "rotate_left" 2 1730 "void(*int8 address,int8 bytes)" `531 
f N "rotate_right" 2 1731 ""
v L "address" 2 1731 "*int8" `535 
v L "bytes" 2 1731 "int8" `536 
f B "rotate_right" 2 1731 "void(*int8 address,int8 bytes)" `534 
f N "swap" 2 1732 ""
v L "value" 2 1732 "int8" `538 
f B "swap" 2 1732 "void(int8 value)" `537 
f N "make8" 2 1733 ""
v L "var" 2 1733 "int16" `540 
v L "offset" 2 1733 "int8" `541 
f B "make8" 2 1733 "int8(int16 var,int8 offset)" `539 
f N "make8" 2 1734 ""
v L "var" 2 1734 "int32" `543 
v L "offset" 2 1734 "int8" `544 
f B "make8" 2 1734 "int8(int32 var,int8 offset)" `542 
f N "make16" 2 1735 ""
v L "varhigh" 2 1735 "int8" `546 
v L "varlow" 2 1735 "int8" `547 
f B "make16" 2 1735 "int16(int8 varhigh,int8 varlow)" `545 
f N "make32" 2 1736 ""
v L "var1" 2 1736 "int16" `549 
f B "make32" 2 1736 "int32(int16 var1)" `548 
f N "make32" 2 1737 ""
v L "var1" 2 1737 "int16" `551 
v L "var2" 2 1737 "int16" `552 
f B "make32" 2 1737 "int32(int16 var1,int16 var2)" `550 
f N "make32" 2 1738 ""
v L "var1" 2 1738 "int16" `554 
v L "var2" 2 1738 "int8" `555 
f B "make32" 2 1738 "int32(int16 var1,int8 var2)" `553 
f N "make32" 2 1739 ""
v L "var1" 2 1739 "int16" `557 
v L "var2" 2 1739 "int8" `558 
v L "var3" 2 1739 "int8" `559 
f B "make32" 2 1739 "int32(int16 var1,int8 var2,int8 var3)" `556 
f N "make32" 2 1740 ""
v L "var1" 2 1740 "int8" `561 
f B "make32" 2 1740 "int32(int8 var1)" `560 
f N "make32" 2 1741 ""
v L "var1" 2 1741 "int8" `563 
v L "var2" 2 1741 "int8" `564 
f B "make32" 2 1741 "int32(int8 var1,int8 var2)" `562 
f N "make32" 2 1742 ""
v L "var1" 2 1742 "int8" `566 
v L "var2" 2 1742 "int8" `567 
v L "var3" 2 1742 "int8" `568 
f B "make32" 2 1742 "int32(int8 var1,int8 var2,int8 var3)" `565 
f N "make32" 2 1743 ""
v L "var1" 2 1743 "int8" `570 
v L "var2" 2 1743 "int8" `571 
v L "var3" 2 1743 "int8" `572 
v L "var4" 2 1743 "int8" `573 
f B "make32" 2 1743 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `569 
f N "make32" 2 1744 ""
v L "var1" 2 1744 "int8" `575 
v L "var2" 2 1744 "int16" `576 
f B "make32" 2 1744 "int32(int8 var1,int16 var2)" `574 
f N "make32" 2 1745 ""
v L "var1" 2 1745 "int8" `578 
v L "var2" 2 1745 "int16" `579 
v L "var3" 2 1745 "int8" `580 
f B "make32" 2 1745 "int32(int8 var1,int16 var2,int8 var3)" `577 
f N "make32" 2 1746 ""
v L "var1" 2 1746 "int8" `582 
v L "var2" 2 1746 "int8" `583 
v L "var3" 2 1746 "int16" `584 
f B "make32" 2 1746 "int32(int8 var1,int8 var2,int16 var3)" `581 
f N "bit_set" 2 1747 ""
v L "var" 2 1747 "int8" `586 
v L "bit" 2 1747 "int8" `587 
f B "bit_set" 2 1747 "void(int8 var,int8 bit)" `585 
f N "bit_set" 2 1748 ""
v L "var" 2 1748 "int16" `589 
v L "bit" 2 1748 "int8" `590 
f B "bit_set" 2 1748 "void(int16 var,int8 bit)" `588 
f N "bit_set" 2 1749 ""
v L "var" 2 1749 "int32" `592 
v L "bit" 2 1749 "int8" `593 
f B "bit_set" 2 1749 "void(int32 var,int8 bit)" `591 
f N "bit_clear" 2 1750 ""
v L "var" 2 1750 "int8" `595 
v L "bit" 2 1750 "int8" `596 
f B "bit_clear" 2 1750 "void(int8 var,int8 bit)" `594 
f N "bit_clear" 2 1751 ""
v L "var" 2 1751 "int16" `598 
v L "bit" 2 1751 "int8" `599 
f B "bit_clear" 2 1751 "void(int16 var,int8 bit)" `597 
f N "bit_clear" 2 1752 ""
v L "var" 2 1752 "int32" `601 
v L "bit" 2 1752 "int8" `602 
f B "bit_clear" 2 1752 "void(int32 var,int8 bit)" `600 
f N "bit_test" 2 1753 ""
v L "var" 2 1753 "int8" `604 
v L "bit" 2 1753 "int8" `605 
f B "bit_test" 2 1753 "int8(int8 var,int8 bit)" `603 
f N "bit_test" 2 1754 ""
v L "var" 2 1754 "int16" `607 
v L "bit" 2 1754 "int8" `608 
f B "bit_test" 2 1754 "int8(int16 var,int8 bit)" `606 
f N "bit_test" 2 1755 ""
v L "var" 2 1755 "int32" `610 
v L "bit" 2 1755 "int8" `611 
f B "bit_test" 2 1755 "int8(int32 var,int8 bit)" `609  "#use delay() Prototypes:"
f N "delay_cycles" 2 1758 ""
v L "count" 2 1758 "int8" `613 
f B "delay_cycles" 2 1758 "void(int8 count)" `612 
f N "delay_ms" 2 1759 ""
v L "time" 2 1759 "int16" `615 
f B "delay_ms" 2 1759 "void(int16 time)" `614 
f N "delay_us" 2 1760 ""
v L "time" 2 1760 "int16" `617 
f B "delay_us" 2 1760 "void(int16 time)" `616  "#use rs232() Prototypes:"
f N "putchar" 2 1763 ""
v L "cdata" 2 1763 "int8" `619 
f B "putchar" 2 1763 "void(int8 cdata)" `618 
f N "putchar" 2 1764 ""
v L "cdata" 2 1764 "int8" `621 
v L "stream" 2 1764 "int8" `622 
f B "putchar" 2 1764 "void(int8 cdata,int8 stream)" `620 
f N "puts" 2 1765 ""
v L "string" 2 1765 "*int8" `624 
f B "puts" 2 1765 "void(*int8 string)" `623 
f N "puts" 2 1766 ""
v L "string" 2 1766 "*int8" `626 
v L "stream" 2 1766 "int8" `627 
f B "puts" 2 1766 "void(*int8 string,int8 stream)" `625 
f N "getch" 2 1767 ""
f B "getch" 2 1767 "int8()" `628 
f N "getch" 2 1768 ""
v L "stream" 2 1768 "int8" `630 
f B "getch" 2 1768 "int8(int8 stream)" `629 
f N "gets" 2 1769 ""
v L "string" 2 1769 "*int8" `632 
f B "gets" 2 1769 "void(*int8 string)" `631 
f N "gets" 2 1770 ""
v L "string" 2 1770 "*int8" `634 
v L "stream" 2 1770 "int8" `635 
f B "gets" 2 1770 "void(*int8 string,int8 stream)" `633 
f N "kbhit" 2 1771 ""
f B "kbhit" 2 1771 "int8()" `636 
f N "kbhit" 2 1772 ""
v L "stream" 2 1772 "int8" `638 
f B "kbhit" 2 1772 "int8(int8 stream)" `637 
f N "printf" 2 1773 ""
v L "string" 2 1773 "*int8" `640 
f B "printf" 2 1773 "void(*int8 string,*int8 _VA_LIST)" `639 
f N "fprintf" 2 1774 ""
v L "stream" 2 1774 "int8" `643 
v L "string" 2 1774 "*int8" `644 
f B "fprintf" 2 1774 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `642 
f N "putc_send" 2 1775 ""
f B "putc_send" 2 1775 "void()" `646 
f N "fputc_send" 2 1776 ""
v L "stream" 2 1776 "int8" `648 
f B "fputc_send" 2 1776 "void(int8 stream)" `647 
f N "rcv_buffer_full" 2 1777 ""
f B "rcv_buffer_full" 2 1777 "int8()" `649 
f N "rcv_buffer_full" 2 1778 ""
v L "stream" 2 1778 "int8" `651 
f B "rcv_buffer_full" 2 1778 "int8(int8 stream)" `650 
f N "rcv_buffer_bytes" 2 1779 ""
f B "rcv_buffer_bytes" 2 1779 "int16()" `652 
f N "rcv_buffer_bytes" 2 1780 ""
v L "stream" 2 1780 "int8" `654 
f B "rcv_buffer_bytes" 2 1780 "int16(int8 stream)" `653 
f N "tx_buffer_full" 2 1781 ""
f B "tx_buffer_full" 2 1781 "int8()" `655 
f N "tx_buffer_full" 2 1782 ""
v L "stream" 2 1782 "int8" `657 
f B "tx_buffer_full" 2 1782 "int8(int8 stream)" `656 
f N "tx_buffer_bytes" 2 1783 ""
f B "tx_buffer_bytes" 2 1783 "int16()" `658 
f N "tx_buffer_bytes" 2 1784 ""
v L "stream" 2 1784 "int8" `660 
f B "tx_buffer_bytes" 2 1784 "int16(int8 stream)" `659  "#use i2c() Prototypes:"
f N "i2c_read" 2 1787 ""
f B "i2c_read" 2 1787 "int8()" `661 
f N "i2c_read" 2 1788 ""
v L "ack" 2 1788 "int8" `663 
f B "i2c_read" 2 1788 "int8(int8 ack)" `662 
f N "i2c_read" 2 1789 ""
v L "stream" 2 1789 "int8" `665 
v L "ack" 2 1789 "int8" `666 
f B "i2c_read" 2 1789 "int8(int8 stream,int8 ack)" `664 
f N "i2c_write" 2 1790 ""
v L "data" 2 1790 "int8" `668 
f B "i2c_write" 2 1790 "int8(int8 data)" `667 
f N "i2c_write" 2 1791 ""
v L "stream" 2 1791 "int8" `670 
v L "data" 2 1791 "int8" `671 
f B "i2c_write" 2 1791 "int8(int8 stream,int8 data)" `669 
f N "i2c_start" 2 1792 ""
f B "i2c_start" 2 1792 "void()" `672 
f N "i2c_start" 2 1793 ""
v L "stream" 2 1793 "int8" `674 
f B "i2c_start" 2 1793 "void(int8 stream)" `673 
f N "i2c_start" 2 1794 ""
v L "stream" 2 1794 "int8" `676 
v L "restart" 2 1794 "int8" `677 
f B "i2c_start" 2 1794 "void(int8 stream,int8 restart)" `675 
f N "i2c_stop" 2 1795 ""
f B "i2c_stop" 2 1795 "void()" `678 
f N "i2c_stop" 2 1796 ""
v L "stream" 2 1796 "int8" `680 
f B "i2c_stop" 2 1796 "void(int8 stream)" `679 
f N "i2c_isr_state" 2 1797 ""
f B "i2c_isr_state" 2 1797 "int8()" `681 
f N "i2c_slaveaddr" 2 1798 ""
v L "addr" 2 1798 "int8" `683 
f B "i2c_slaveaddr" 2 1798 "void(int8 addr)" `682 
f N "i2c_slaveaddr" 2 1799 ""
v L "stream" 2 1799 "int8" `685 
v L "addr" 2 1799 "int8" `686 
f B "i2c_slaveaddr" 2 1799 "void(int8 stream,int8 addr)" `684 
f N "i2c_poll" 2 1800 ""
f B "i2c_poll" 2 1800 "int8()" `687 
f N "i2c_poll" 2 1801 ""
v L "stream" 2 1801 "int8" `689 
f B "i2c_poll" 2 1801 "int8(int8 stream)" `688 
f N "i2c_init" 2 1802 ""
v L "baud" 2 1802 "int32" `691 
f B "i2c_init" 2 1802 "void(int32 baud)" `690 
f N "i2c_init" 2 1803 ""
v L "stream" 2 1803 "int8" `693 
v L "baud" 2 1803 "int32" `694 
f B "i2c_init" 2 1803 "void(int8 stream,int32 baud)" `692 
f N "i2c_transfer" 2 1804 ""
v L "address" 2 1804 "int8" `696 
v L "wData" 2 1804 "*int8" `697 
v L "wCount" 2 1804 "int8" `698 
f B "i2c_transfer" 2 1804 "int8(int8 address,*int8 wData,int8 wCount)" `695 
f N "i2c_transfer" 2 1805 ""
v L "address" 2 1805 "int8" `700 
v L "wData" 2 1805 "*int8" `701 
v L "wCount" 2 1805 "int8" `702 
v L "rData" 2 1805 "*int8" `703 
v L "rCount" 2 1805 "*int8" `704 
f B "i2c_transfer" 2 1805 "int8(int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `699 
f N "i2c_transfer" 2 1806 ""
v L "stream" 2 1806 "int8" `706 
v L "address" 2 1806 "int8" `707 
v L "wData" 2 1806 "*int8" `708 
v L "wCount" 2 1806 "int8" `709 
f B "i2c_transfer" 2 1806 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `705 
f N "i2c_transfer" 2 1807 ""
v L "stream" 2 1807 "int8" `711 
v L "address" 2 1807 "int8" `712 
v L "wData" 2 1807 "*int8" `713 
v L "wCount" 2 1807 "int8" `714 
v L "rData" 2 1807 "*int8" `715 
v L "rCount" 2 1807 "*int8" `716 
f B "i2c_transfer" 2 1807 "int8(int8 stream,int8 address,*int8 wData,int8 wCount,*int8 rData,*int8 rCount)" `710 
f N "i2c_transfer_out" 2 1808 ""
v L "address" 2 1808 "int8" `718 
v L "wData" 2 1808 "*int8" `719 
v L "wCount" 2 1808 "int8" `720 
f B "i2c_transfer_out" 2 1808 "int8(int8 address,*int8 wData,int8 wCount)" `717 
f N "i2c_transfer_out" 2 1809 ""
v L "stream" 2 1809 "int8" `722 
v L "address" 2 1809 "int8" `723 
v L "wData" 2 1809 "*int8" `724 
v L "wCount" 2 1809 "int8" `725 
f B "i2c_transfer_out" 2 1809 "int8(int8 stream,int8 address,*int8 wData,int8 wCount)" `721 
f N "i2c_transfer_in" 2 1810 ""
v L "address" 2 1810 "int8" `727 
v L "rData" 2 1810 "*int8" `728 
v L "rCount" 2 1810 "int8" `729 
f B "i2c_transfer_in" 2 1810 "int8(int8 address,*int8 rData,int8 rCount)" `726 
f N "i2c_transfer_in" 2 1811 ""
v L "stream" 2 1811 "int8" `731 
v L "address" 2 1811 "int8" `732 
v L "rData" 2 1811 "*int8" `733 
v L "rCount" 2 1811 "int8" `734 
f B "i2c_transfer_in" 2 1811 "int8(int8 stream,int8 address,*int8 rData,int8 rCount)" `730  "#use spi() Prototypes:"
f N "spi_xfer" 2 1814 ""
f B "spi_xfer" 2 1814 "int8()" `735 
f N "spi_xfer" 2 1815 ""
f G "spi_xfer" 2 1815 "int16(int8 data)" `736 
f N "spi_xfer" 2 1816 ""
f G "spi_xfer" 2 1816 "int32(int8 data)" `736 
f N "spi_xfer" 2 1817 ""
v L "data" 2 1817 "int8" `737 
f B "spi_xfer" 2 1817 "int8(int8 data)" `736 
f N "spi_xfer" 2 1818 ""
v L "data" 2 1818 "int16" `739 
f B "spi_xfer" 2 1818 "int16(int16 data)" `738 
f N "spi_xfer" 2 1819 ""
v L "data" 2 1819 "int32" `741 
f B "spi_xfer" 2 1819 "int32(int32 data)" `740 
f N "spi_xfer" 2 1820 ""
v L "stream" 2 1820 "int8" `743 
v L "data" 2 1820 "int8" `744 
f B "spi_xfer" 2 1820 "int8(int8 stream,int8 data)" `742 
f N "spi_xfer" 2 1821 ""
v L "stream" 2 1821 "int8" `746 
v L "data" 2 1821 "int16" `747 
f B "spi_xfer" 2 1821 "int16(int8 stream,int16 data)" `745 
f N "spi_xfer" 2 1822 ""
v L "stream" 2 1822 "int8" `749 
v L "data" 2 1822 "int32" `750 
f B "spi_xfer" 2 1822 "int32(int8 stream,int32 data)" `748 
f N "spi_xfer" 2 1823 ""
v L "stream" 2 1823 "int8" `752 
v L "data" 2 1823 "int8" `753 
v L "bits" 2 1823 "int8" `754 
f B "spi_xfer" 2 1823 "int8(int8 stream,int8 data,int8 bits)" `751 
f N "spi_xfer" 2 1824 ""
v L "stream" 2 1824 "int8" `756 
v L "data" 2 1824 "int16" `757 
v L "bits" 2 1824 "int8" `758 
f B "spi_xfer" 2 1824 "int16(int8 stream,int16 data,int8 bits)" `755 
f N "spi_xfer" 2 1825 ""
v L "stream" 2 1825 "int8" `760 
v L "data" 2 1825 "int32" `761 
v L "bits" 2 1825 "int8" `762 
f B "spi_xfer" 2 1825 "int32(int8 stream,int32 data,int8 bits)" `759 
f N "spi_init" 2 1826 ""
v L "baud" 2 1826 "int32" `764 
f B "spi_init" 2 1826 "void(int32 baud)" `763 
f N "spi_init" 2 1827 ""
v L "stream" 2 1827 "int8" `766 
v L "baud" 2 1827 "int32" `767 
f B "spi_init" 2 1827 "void(int8 stream,int32 baud)" `765 
f N "spi_speed" 2 1828 ""
v L "baud" 2 1828 "int32" `769 
f B "spi_speed" 2 1828 "void(int32 baud)" `768 
f N "spi_speed" 2 1829 ""
v L "stream" 2 1829 "int8" `771 
v L "baud" 2 1829 "int32" `772 
f B "spi_speed" 2 1829 "void(int8 stream,int32 baud)" `770 
f N "spi_speed" 2 1830 ""
v L "stream" 2 1830 "int8" `774 
v L "baud" 2 1830 "int32" `775 
v L "clock" 2 1830 "int32" `776 
f B "spi_speed" 2 1830 "void(int8 stream,int32 baud,int32 clock)" `773 
f N "spi_prewrite" 2 1831 ""
v L "data" 2 1831 "int8" `778 
f B "spi_prewrite" 2 1831 "void(int8 data)" `777 
f N "spi_prewrite" 2 1832 ""
v L "data" 2 1832 "int16" `780 
f B "spi_prewrite" 2 1832 "void(int16 data)" `779 
f N "spi_prewrite" 2 1833 ""
v L "data" 2 1833 "int32" `782 
f B "spi_prewrite" 2 1833 "void(int32 data)" `781 
f N "spi_prewrite" 2 1834 ""
v L "??65535" 2 1834 "int8" `784 
v L "data" 2 1834 "int8" `785 
f B "spi_prewrite" 2 1834 "void(int8 ,int8 data)" `783 
f N "spi_prewrite" 2 1835 ""
v L "??65535" 2 1835 "int8" `787 
v L "data" 2 1835 "int16" `788 
f B "spi_prewrite" 2 1835 "void(int8 ,int16 data)" `786 
f N "spi_prewrite" 2 1836 ""
v L "??65535" 2 1836 "int8" `790 
v L "data" 2 1836 "int32" `791 
f B "spi_prewrite" 2 1836 "void(int8 ,int32 data)" `789 
f N "spi_xfer_in" 2 1837 ""
f B "spi_xfer_in" 2 1837 "int8()" `792 
f N "spi_xfer_in" 2 1838 ""
f G "spi_xfer_in" 2 1838 "int16(int8 bits)" `793 
f N "spi_xfer_in" 2 1839 ""
f G "spi_xfer_in" 2 1839 "int32(int8 bits)" `793 
f N "spi_xfer_in" 2 1840 ""
v L "bits" 2 1840 "int8" `794 
f B "spi_xfer_in" 2 1840 "int8(int8 bits)" `793 
f N "spi_xfer_in" 2 1841 ""
v L "bits" 2 1841 "int8" `796 
f G "spi_xfer_in" 2 1841 "int16(int8 bits,int8 bits)" `795 
f N "spi_xfer_in" 2 1842 ""
v L "bits" 2 1842 "int8" `796 
f G "spi_xfer_in" 2 1842 "int32(int8 bits,int8 bits)" `795 
f N "spi_xfer_in" 2 1843 ""
v L "stream" 2 1843 "int8" `796 
v L "bits" 2 1843 "int8" `797 
f B "spi_xfer_in" 2 1843 "int8(int8 stream,int8 bits)" `795 
f N "spi_xfer_in" 2 1844 ""
v L "stream" 2 1844 "int8" `796 
v L "bits" 2 1844 "int8" `800 
f G "spi_xfer_in" 2 1844 "int16(int8 stream,int8 bits,int16 count)" `798 
f N "spi_xfer_in" 2 1845 ""
v L "stream" 2 1845 "int8" `796 
v L "bits" 2 1845 "int8" `800 
f G "spi_xfer_in" 2 1845 "int32(int8 stream,int8 bits,int16 count)" `798 
f N "spi_transfer" 2 1846 ""
v L "wData" 2 1846 "*int8" `799 
v L "rData" 2 1846 "*int8" `800 
v L "count" 2 1846 "int16" `801 
f B "spi_transfer" 2 1846 "void(*int8 wData,*int8 rData,int16 count)" `798 
f N "spi_transfer" 2 1847 ""
v L "stream" 2 1847 "int8" `803 
v L "wData" 2 1847 "*int8" `804 
v L "rData" 2 1847 "*int8" `805 
v L "count" 2 1847 "int16" `806 
f B "spi_transfer" 2 1847 "void(int8 stream,*int8 wData,*int8 rData,int16 count)" `802 
f N "spi_transfer_write" 2 1848 ""
v L "wData" 2 1848 "*int8" `808 
v L "count" 2 1848 "int16" `809 
f B "spi_transfer_write" 2 1848 "void(*int8 wData,int16 count)" `807 
f N "spi_transfer_write" 2 1849 ""
v L "stream" 2 1849 "int8" `811 
v L "wData" 2 1849 "*int8" `812 
v L "count" 2 1849 "int16" `813 
f B "spi_transfer_write" 2 1849 "void(int8 stream,*int8 wData,int16 count)" `810 
f N "spi_transfer_read" 2 1850 ""
v L "rData" 2 1850 "*int8" `815 
v L "count" 2 1850 "int16" `816 
f B "spi_transfer_read" 2 1850 "void(*int8 rData,int16 count)" `814 
f N "spi_transfer_read" 2 1851 ""
v L "stream" 2 1851 "int8" `818 
v L "rData" 2 1851 "*int8" `819 
v L "count" 2 1851 "int16" `820 
f B "spi_transfer_read" 2 1851 "void(int8 stream,*int8 rData,int16 count)" `817  "#use rtos() Prototypes:"
f N "rtos_run" 2 1854 ""
f B "rtos_run" 2 1854 "void()" `821 
f N "rtos_yield" 2 1855 ""
f B "rtos_yield" 2 1855 "void()" `822 
f N "rtos_enable" 2 1856 ""
v L "task" 2 1856 "int8" `824 
f B "rtos_enable" 2 1856 "void(int8 task)" `823 
f N "rtos_disable" 2 1857 ""
v L "task" 2 1857 "int8" `826 
f B "rtos_disable" 2 1857 "void(int8 task)" `825 
f N "rtos_terminate" 2 1858 ""
f B "rtos_terminate" 2 1858 "void()" `827 
f N "rtos_await" 2 1859 ""
v L "flag" 2 1859 "int8" `829 
f B "rtos_await" 2 1859 "void(int8 flag)" `828 
f N "rtos_wait" 2 1860 ""
v L "sem" 2 1860 "int8" `831 
f B "rtos_wait" 2 1860 "void(int8 sem)" `830 
f N "rtos_signal" 2 1861 ""
v L "sem" 2 1861 "int8" `833 
f B "rtos_signal" 2 1861 "void(int8 sem)" `832 
f N "rtos_msg_send" 2 1862 ""
v L "task" 2 1862 "int8" `835 
v L "msg" 2 1862 "int8" `836 
f B "rtos_msg_send" 2 1862 "void(int8 task,int8 msg)" `834 
f N "rtos_msg_read" 2 1863 ""
f B "rtos_msg_read" 2 1863 "int8()" `837 
f N "rtos_msg_poll" 2 1864 ""
f B "rtos_msg_poll" 2 1864 "int8()" `838 
f N "rtos_overrun" 2 1865 ""
v L "task" 2 1865 "int8" `840 
f B "rtos_overrun" 2 1865 "int8(int8 task)" `839 
f N "rtos_stats" 2 1866 ""
v L "task" 2 1866 "int8" `842 
v L "stat" 2 1866 "*int8" `843 
f B "rtos_stats" 2 1866 "void(int8 task,*int8 stat)" `841  "#use timer() Prototypes:"
f N "get_ticks" 2 1869 ""
f B "get_ticks" 2 1869 "int8()" `844 
f N "get_ticks" 2 1870 ""
f G "get_ticks" 2 1870 "int16(int8 stream)" `845 
f N "get_ticks" 2 1871 ""
f G "get_ticks" 2 1871 "int32(int8 stream)" `845 
f N "get_ticks" 2 1872 ""
v L "stream" 2 1872 "int8" `846 
f B "get_ticks" 2 1872 "int8(int8 stream)" `845 
f N "get_ticks" 2 1873 ""
v L "stream" 2 1873 "int8" `848 
f G "get_ticks" 2 1873 "int16(int8 stream)" `847 
f N "get_ticks" 2 1874 ""
v L "stream" 2 1874 "int8" `848 
f G "get_ticks" 2 1874 "int32(int8 stream)" `847 
f N "set_ticks" 2 1875 ""
v L "value" 2 1875 "int8" `848 
f B "set_ticks" 2 1875 "void(int8 value)" `847 
f N "set_ticks" 2 1876 ""
v L "value" 2 1876 "int16" `850 
f B "set_ticks" 2 1876 "void(int16 value)" `849 
f N "set_ticks" 2 1877 ""
v L "value" 2 1877 "int32" `852 
f B "set_ticks" 2 1877 "void(int32 value)" `851 
f N "set_ticks" 2 1878 ""
v L "stream" 2 1878 "int8" `854 
v L "value" 2 1878 "int8" `855 
f B "set_ticks" 2 1878 "void(int8 stream,int8 value)" `853 
f N "set_ticks" 2 1879 ""
v L "stream" 2 1879 "int8" `857 
v L "value" 2 1879 "int16" `858 
f B "set_ticks" 2 1879 "void(int8 stream,int16 value)" `856 
f N "set_ticks" 2 1880 ""
v L "stream" 2 1880 "int8" `860 
v L "value" 2 1880 "int32" `861 
f B "set_ticks" 2 1880 "void(int8 stream,int32 value)" `859  "#use pwm() Prototypes:"
f N "pwm_on" 2 1883 ""
f B "pwm_on" 2 1883 "void()" `862 
f N "pwm_on" 2 1884 ""
v L "stream" 2 1884 "int8" `864 
f B "pwm_on" 2 1884 "void(int8 stream)" `863 
f N "pwm_off" 2 1885 ""
f B "pwm_off" 2 1885 "void()" `865 
f N "pwm_off" 2 1886 ""
v L "stream" 2 1886 "int8" `867 
f B "pwm_off" 2 1886 "void(int8 stream)" `866 
f N "pwm_set_duty" 2 1887 ""
v L "duty" 2 1887 "int16" `869 
f B "pwm_set_duty" 2 1887 "void(int16 duty)" `868 
f N "pwm_set_duty" 2 1888 ""
v L "stream" 2 1888 "int8" `871 
v L "duty" 2 1888 "int16" `872 
f B "pwm_set_duty" 2 1888 "void(int8 stream,int16 duty)" `870 
f N "pwm_set_duty_percent" 2 1889 ""
v L "percent" 2 1889 "int16" `874 
f B "pwm_set_duty_percent" 2 1889 "void(int16 percent)" `873 
f N "pwm_set_duty_percent" 2 1890 ""
v L "stream" 2 1890 "int8" `876 
v L "percent" 2 1890 "int16" `877 
f B "pwm_set_duty_percent" 2 1890 "void(int8 stream,int16 percent)" `875 
f N "pwm_set_frequency" 2 1891 ""
v L "frequency" 2 1891 "int32" `879 
f B "pwm_set_frequency" 2 1891 "void(int32 frequency)" `878 
f N "pwm_set_frequency" 2 1892 ""
v L "stream" 2 1892 "int8" `881 
v L "frequency" 2 1892 "int32" `882 
f B "pwm_set_frequency" 2 1892 "void(int8 stream,int32 frequency)" `880 
f N "pwm_get_duty_period" 2 1893 ""
f B "pwm_get_duty_period" 2 1893 "int16()" `883 
f N "pwm_get_duty_period" 2 1894 ""
v L "stream" 2 1894 "int8" `885 
f B "pwm_get_duty_period" 2 1894 "int16(int8 stream)" `884  "#use capture() Prototypes:"
f N "get_capture_time" 2 1897 ""
f B "get_capture_time" 2 1897 "int16()" `886 
f N "get_capture_time" 2 1898 ""
v L "stream" 2 1898 "int8" `888 
f B "get_capture_time" 2 1898 "int16(int8 stream)" `887 
f N "get_capture_event" 2 1899 ""
f B "get_capture_event" 2 1899 "int8()" `889 
f N "get_capture_event" 2 1900 ""
v L "stream" 2 1900 "int8" `891 
f B "get_capture_event" 2 1900 "int8(int8 stream)" `890  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 1913 ""
v L "address" 2 1913 "int16" `893 
f B "goto_address" 2 1913 "void(int16 address)" `892 
f N "label_address" 2 1914 ""
v L "label" 2 1914 "int16" `895 
f B "label_address" 2 1914 "int16(int16 label)" `894  "Program Memory Read Prototypes:"
f N "read_program_memory" 2 1917 ""
v L "address" 2 1917 "int16" `897 
v L "dataptr" 2 1917 "*int8" `898 
v L "count" 2 1917 "int16" `899 
f B "read_program_memory" 2 1917 "void(int16 address,*int8 dataptr,int16 count)" `896 
f N "read_program_eeprom" 2 1918 ""
v L "address" 2 1918 "int16" `901 
f B "read_program_eeprom" 2 1918 "int16(int16 address)" `900 
f N "read_configuration_memory" 2 1919 ""
v L "dataptr" 2 1919 "*int8" `903 
v L "count" 2 1919 "int8" `904 
f B "read_configuration_memory" 2 1919 "void(*int8 dataptr,int8 count)" `902 
f N "read_configuration_memory" 2 1920 ""
v L "offset" 2 1920 "int8" `906 
v L "dataptr" 2 1920 "*int8" `907 
v L "count" 2 1920 "int8" `908 
f B "read_configuration_memory" 2 1920 "void(int8 offset,*int8 dataptr,int8 count)" `905 
f N "read_configuration_memory" 2 1921 ""
v L "dataptr" 2 1921 "*int8" `903 
v L "count" 2 1921 "int8" `911 
f G "read_configuration_memory" 2 1921 "void(*int8 dataptr,int8 count,int16 count)" `909 
f N "read_configuration_memory" 2 1922 ""
v L "offset" 2 1922 "int8" `906 
v L "dataptr" 2 1922 "*int8" `907 
v L "count" 2 1922 "int8" `912 
f G "read_configuration_memory" 2 1922 "void(int8 offset,*int8 dataptr,int8 count)" `909  "Program Memory Write Prototypes:"
f N "write_program_memory" 2 1925 ""
v L "address" 2 1925 "int16" `910 
v L "dataptr" 2 1925 "*int8" `911 
v L "count" 2 1925 "int16" `912 
f B "write_program_memory" 2 1925 "void(int16 address,*int8 dataptr,int16 count)" `909 
f N "write_program_eeprom" 2 1926 ""
v L "address" 2 1926 "int16" `914 
v L "data" 2 1926 "int16" `915 
f B "write_program_eeprom" 2 1926 "void(int16 address,int16 data)" `913 
f N "write_configuration_memory" 2 1927 ""
v L "dataptr" 2 1927 "*int8" `917 
v L "count" 2 1927 "int8" `918 
f B "write_configuration_memory" 2 1927 "void(*int8 dataptr,int8 count)" `916 
f N "write_configuration_memory" 2 1928 ""
v L "offset" 2 1928 "int8" `920 
v L "dataptr" 2 1928 "*int8" `921 
v L "count" 2 1928 "int8" `922 
f B "write_configuration_memory" 2 1928 "void(int8 offset,*int8 dataptr,int8 count)" `919 
f N "write_configuration_memory" 2 1929 ""
v L "dataptr" 2 1929 "*int8" `917 
v L "count" 2 1929 "int8" `925 
f G "write_configuration_memory" 2 1929 "void(*int8 dataptr,int8 count,int8 address,int8 value)" `923 
f N "write_configuration_memory" 2 1930 ""
v L "offset" 2 1930 "int8" `920 
v L "dataptr" 2 1930 "*int8" `921 
v L "count" 2 1930 "int8" `926 
f G "write_configuration_memory" 2 1930 "void(int8 offset,*int8 dataptr,int8 count,int8 value)" `923  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 1937 "unsigned int8"
f N "read_eeprom" 2 1940 ""
v L "address" 2 1940 "int8" `924 
f B "read_eeprom" 2 1940 "int8(int8 address,*int8 dataptr,int8 count,int8 value)" `923 
f N "write_eeprom" 2 1941 ""
v L "address" 2 1941 "int8" `926 
v L "value" 2 1941 "int8" `927 
f B "write_eeprom" 2 1941 "void(int8 address,int8 value)" `925  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 1948 ""
v L "interrupt" 2 1948 "int32" `929 
f B "enable_interrupts" 2 1948 "void(int32 interrupt)" `928 
f N "disable_interrupts" 2 1949 ""
v L "interrupt" 2 1949 "int32" `931 
f B "disable_interrupts" 2 1949 "void(int32 interrupt)" `930 
f N "clear_interrupt" 2 1950 ""
v L "interrupt" 2 1950 "int32" `933 
f B "clear_interrupt" 2 1950 "void(int32 interrupt)" `932 
f N "interrupt_active" 2 1951 ""
v L "interrupt" 2 1951 "int32" `935 
f B "interrupt_active" 2 1951 "int8(int32 interrupt)" `934 
f N "interrupt_enabled" 2 1952 ""
v L "interrupt" 2 1952 "int32" `937 
f B "interrupt_enabled" 2 1952 "int8(int32 interrupt)" `936 
f N "ext_int_edge" 2 1953 ""
v L "source" 2 1953 "int8" `939 
v L "edge" 2 1953 "int8" `940 
f B "ext_int_edge" 2 1953 "void(int8 source,int8 edge)" `938 
f N "jump_to_isr" 2 1954 ""
v L "address" 2 1954 "int16" `942 
f B "jump_to_isr" 2 1954 "void(int16 address)" `941  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 1956 "0x40"
d G "H_TO_L" 2 1957 "0"
d G "GLOBAL" 2 1959 "0x0BC0"
d G "PERIPH" 2 1960 "0x0B40"
d G "INT_EXT_L2H" 2 1961 "0x50001601"
d G "INT_EXT_H2L" 2 1962 "0x60001601"
d G "INT_EXT" 2 1963 "0x301601"
d G "INT_TIMER0" 2 1964 "0x301620"
d G "INT_AD" 2 1965 "0x301701"
d G "INT_AD_THRESHOLD" 2 1966 "0x301702"
d G "INT_CSW" 2 1967 "0x301740"
d G "INT_OSC_FAIL" 2 1968 "0x301780"
d G "INT_COMP" 2 1969 "0x301801"
d G "INT_COMP2" 2 1970 "0x301802"
d G "INT_ZCD" 2 1971 "0x301840"
d G "INT_SSP" 2 1972 "0x301901"
d G "INT_BUSCOL" 2 1973 "0x301902"
d G "INT_SSP2" 2 1974 "0x301904"
d G "INT_BUSCOL2" 2 1975 "0x301908"
d G "INT_TBE" 2 1976 "0x301910"
d G "INT_RDA" 2 1977 "0x301920"
d G "INT_TIMER1" 2 1978 "0x301A01"
d G "INT_TIMER2" 2 1979 "0x301A02"
d G "INT_TIMER3" 2 1980 "0x301A04"
d G "INT_TIMER4" 2 1981 "0x301A08"
d G "INT_TIMER5" 2 1982 "0x301A10"
d G "INT_TIMER6" 2 1983 "0x301A20"
d G "INT_TIMER1_GATE" 2 1984 "0x301B01"
d G "INT_TIMER3_GATE" 2 1985 "0x301B02"
d G "INT_TIMER5_GATE" 2 1986 "0x301B04"
d G "INT_CLC" 2 1987 "0x301B10"
d G "INT_CLC2" 2 1988 "0x301B20"
d G "INT_CLC3" 2 1989 "0x301B40"
d G "INT_CLC4" 2 1990 "0x301B80"
d G "INT_CCP1" 2 1991 "0x301C01"
d G "INT_CCP2" 2 1992 "0x301C02"
d G "INT_CCP3" 2 1993 "0x301C04"
d G "INT_CCP4" 2 1994 "0x301C08"
d G "INT_CCP5" 2 1995 "0x301C10"
d G "INT_CWG" 2 1996 "0x301D01"
d G "INT_CWG2" 2 1997 "0x301D02"
d G "INT_CWG3" 2 1998 "0x301D04"
d G "INT_NCO" 2 1999 "0x301D10"
d G "INT_EEPROM" 2 2000 "0x301D20"
d G "INT_CRC" 2 2001 "0x301D40"
d G "INT_SCANNER" 2 2002 "0x301D80"
d G "INT_SMT1" 2 2003 "0x301E01"
d G "INT_SMT1PRA" 2 2004 "0x301E02"
d G "INT_SMT1PWA" 2 2005 "0x301E04"
d G "INT_SMT2" 2 2006 "0x301E08"
d G "INT_SMT2PRA" 2 2007 "0x301E10"
d G "INT_SMT2PWA" 2 2008 "0x301E20"
d G "INT_IOC" 2 2009 "0x3FFF1610"
d G "INT_IOC_A0" 2 2010 "0x30011610"
d G "INT_IOC_A0_L2H" 2 2011 "0x10011610"
d G "INT_IOC_A0_H2L" 2 2012 "0x20011610"
d G "INT_IOC_A1" 2 2013 "0x30021610"
d G "INT_IOC_A1_L2H" 2 2014 "0x10021610"
d G "INT_IOC_A1_H2L" 2 2015 "0x20021610"
d G "INT_IOC_A2" 2 2016 "0x30041610"
d G "INT_IOC_A2_L2H" 2 2017 "0x10041610"
d G "INT_IOC_A2_H2L" 2 2018 "0x20041610"
d G "INT_IOC_A3" 2 2019 "0x30081610"
d G "INT_IOC_A3_L2H" 2 2020 "0x10081610"
d G "INT_IOC_A3_H2L" 2 2021 "0x20081610"
d G "INT_IOC_A4" 2 2022 "0x30101610"
d G "INT_IOC_A4_L2H" 2 2023 "0x10101610"
d G "INT_IOC_A4_H2L" 2 2024 "0x20101610"
d G "INT_IOC_A5" 2 2025 "0x30201610"
d G "INT_IOC_A5_L2H" 2 2026 "0x10201610"
d G "INT_IOC_A5_H2L" 2 2027 "0x20201610"
d G "INT_IOC_A6" 2 2028 "0x30401610"
d G "INT_IOC_A6_L2H" 2 2029 "0x10401610"
d G "INT_IOC_A6_H2L" 2 2030 "0x20401610"
d G "INT_IOC_A7" 2 2031 "0x30801610"
d G "INT_IOC_A7_L2H" 2 2032 "0x10801610"
d G "INT_IOC_A7_H2L" 2 2033 "0x20801610"
d G "INT_IOC_B0" 2 2034 "0x31011610"
d G "INT_IOC_B0_L2H" 2 2035 "0x11011610"
d G "INT_IOC_B0_H2L" 2 2036 "0x21011610"
d G "INT_IOC_B1" 2 2037 "0x31021610"
d G "INT_IOC_B1_L2H" 2 2038 "0x11021610"
d G "INT_IOC_B1_H2L" 2 2039 "0x21021610"
d G "INT_IOC_B2" 2 2040 "0x31041610"
d G "INT_IOC_B2_L2H" 2 2041 "0x11041610"
d G "INT_IOC_B2_H2L" 2 2042 "0x21041610"
d G "INT_IOC_B3" 2 2043 "0x31081610"
d G "INT_IOC_B3_L2H" 2 2044 "0x11081610"
d G "INT_IOC_B3_H2L" 2 2045 "0x21081610"
d G "INT_IOC_B4" 2 2046 "0x31101610"
d G "INT_IOC_B4_L2H" 2 2047 "0x11101610"
d G "INT_IOC_B4_H2L" 2 2048 "0x21101610"
d G "INT_IOC_B5" 2 2049 "0x31201610"
d G "INT_IOC_B5_L2H" 2 2050 "0x11201610"
d G "INT_IOC_B5_H2L" 2 2051 "0x21201610"
d G "INT_IOC_B6" 2 2052 "0x31401610"
d G "INT_IOC_B6_L2H" 2 2053 "0x11401610"
d G "INT_IOC_B6_H2L" 2 2054 "0x21401610"
d G "INT_IOC_B7" 2 2055 "0x31801610"
d G "INT_IOC_B7_L2H" 2 2056 "0x11801610"
d G "INT_IOC_B7_H2L" 2 2057 "0x21801610"
d G "INT_IOC_C0" 2 2058 "0x32011610"
d G "INT_IOC_C0_L2H" 2 2059 "0x12011610"
d G "INT_IOC_C0_H2L" 2 2060 "0x22011610"
d G "INT_IOC_C1" 2 2061 "0x32021610"
d G "INT_IOC_C1_L2H" 2 2062 "0x12021610"
d G "INT_IOC_C1_H2L" 2 2063 "0x22021610"
d G "INT_IOC_C2" 2 2064 "0x32041610"
d G "INT_IOC_C2_L2H" 2 2065 "0x12041610"
d G "INT_IOC_C2_H2L" 2 2066 "0x22041610"
d G "INT_IOC_C3" 2 2067 "0x32081610"
d G "INT_IOC_C3_L2H" 2 2068 "0x12081610"
d G "INT_IOC_C3_H2L" 2 2069 "0x22081610"
d G "INT_IOC_C4" 2 2070 "0x32101610"
d G "INT_IOC_C4_L2H" 2 2071 "0x12101610"
d G "INT_IOC_C4_H2L" 2 2072 "0x22101610"
d G "INT_IOC_C5" 2 2073 "0x32201610"
d G "INT_IOC_C5_L2H" 2 2074 "0x12201610"
d G "INT_IOC_C5_H2L" 2 2075 "0x22201610"
d G "INT_IOC_C6" 2 2076 "0x32401610"
d G "INT_IOC_C6_L2H" 2 2077 "0x12401610"
d G "INT_IOC_C6_H2L" 2 2078 "0x22401610"
d G "INT_IOC_C7" 2 2079 "0x32801610"
d G "INT_IOC_C7_L2H" 2 2080 "0x12801610"
d G "INT_IOC_C7_H2L" 2 2081 "0x22801610"
d G "INT_IOC_E3" 2 2082 "0x34081610"
d G "INT_IOC_E3_L2H" 2 2083 "0x14081610"
d G "INT_IOC_E3_H2L" 2 2084 "0x24081610"
d G "INT_RA" 2 2091 "0x30FF1610"
d G "INT_RA0" 2 2092 "0x30011610"
d G "INT_RA0_L2H" 2 2093 "0x10011610"
d G "INT_RA0_H2L" 2 2094 "0x20011610"
d G "INT_RA1" 2 2095 "0x30021610"
d G "INT_RA1_L2H" 2 2096 "0x10021610"
d G "INT_RA1_H2L" 2 2097 "0x20021610"
d G "INT_RA2" 2 2098 "0x30041610"
d G "INT_RA2_L2H" 2 2099 "0x10041610"
d G "INT_RA2_H2L" 2 2100 "0x20041610"
d G "INT_RA3" 2 2101 "0x30081610"
d G "INT_RA3_L2H" 2 2102 "0x10081610"
d G "INT_RA3_H2L" 2 2103 "0x20081610"
d G "INT_RA4" 2 2104 "0x30101610"
d G "INT_RA4_L2H" 2 2105 "0x10101610"
d G "INT_RA4_H2L" 2 2106 "0x20101610"
d G "INT_RA5" 2 2107 "0x30201610"
d G "INT_RA5_L2H" 2 2108 "0x10201610"
d G "INT_RA5_H2L" 2 2109 "0x20201610"
d G "INT_RA6" 2 2110 "0x30401610"
d G "INT_RA6_L2H" 2 2111 "0x10401610"
d G "INT_RA6_H2L" 2 2112 "0x20401610"
d G "INT_RA7" 2 2113 "0x30801610"
d G "INT_RA7_L2H" 2 2114 "0x10801610"
d G "INT_RA7_H2L" 2 2115 "0x20801610"
d G "INT_RB" 2 2116 "0x30FF1610"
d G "INT_RB0" 2 2117 "0x31011610"
d G "INT_RB0_L2H" 2 2118 "0x11011610"
d G "INT_RB0_H2L" 2 2119 "0x21011610"
d G "INT_RB1" 2 2120 "0x31021610"
d G "INT_RB1_L2H" 2 2121 "0x11021610"
d G "INT_RB1_H2L" 2 2122 "0x21021610"
d G "INT_RB2" 2 2123 "0x31041610"
d G "INT_RB2_L2H" 2 2124 "0x11041610"
d G "INT_RB2_H2L" 2 2125 "0x21041610"
d G "INT_RB3" 2 2126 "0x31081610"
d G "INT_RB3_L2H" 2 2127 "0x11081610"
d G "INT_RB3_H2L" 2 2128 "0x21081610"
d G "INT_RB4" 2 2129 "0x31101610"
d G "INT_RB4_L2H" 2 2130 "0x11101610"
d G "INT_RB4_H2L" 2 2131 "0x21101610"
d G "INT_RB5" 2 2132 "0x31201610"
d G "INT_RB5_L2H" 2 2133 "0x11201610"
d G "INT_RB5_H2L" 2 2134 "0x21201610"
d G "INT_RB6" 2 2135 "0x31401610"
d G "INT_RB6_L2H" 2 2136 "0x11401610"
d G "INT_RB6_H2L" 2 2137 "0x21401610"
d G "INT_RB7" 2 2138 "0x31801610"
d G "INT_RB7_L2H" 2 2139 "0x11801610"
d G "INT_RB7_H2L" 2 2140 "0x21801610"
d G "INT_RC" 2 2141 "0x30FF1610"
d G "INT_RC0" 2 2142 "0x32011610"
d G "INT_RC0_L2H" 2 2143 "0x12011610"
d G "INT_RC0_H2L" 2 2144 "0x22011610"
d G "INT_RC1" 2 2145 "0x32021610"
d G "INT_RC1_L2H" 2 2146 "0x12021610"
d G "INT_RC1_H2L" 2 2147 "0x22021610"
d G "INT_RC2" 2 2148 "0x32041610"
d G "INT_RC2_L2H" 2 2149 "0x12041610"
d G "INT_RC2_H2L" 2 2150 "0x22041610"
d G "INT_RC3" 2 2151 "0x32081610"
d G "INT_RC3_L2H" 2 2152 "0x12081610"
d G "INT_RC3_H2L" 2 2153 "0x22081610"
d G "INT_RC4" 2 2154 "0x32101610"
d G "INT_RC4_L2H" 2 2155 "0x12101610"
d G "INT_RC4_H2L" 2 2156 "0x22101610"
d G "INT_RC5" 2 2157 "0x32201610"
d G "INT_RC5_L2H" 2 2158 "0x12201610"
d G "INT_RC5_H2L" 2 2159 "0x22201610"
d G "INT_RC6" 2 2160 "0x32401610"
d G "INT_RC6_L2H" 2 2161 "0x12401610"
d G "INT_RC6_H2L" 2 2162 "0x22401610"
d G "INT_RC7" 2 2163 "0x32801610"
d G "INT_RC7_L2H" 2 2164 "0x12801610"
d G "INT_RC7_H2L" 2 2165 "0x22801610"
d G "INT_RE" 2 2166 "0x30FF1610"
d G "INT_RE3" 2 2167 "0x32081610"
d G "INT_RE3_L2H" 2 2168 "0x12081610"
d G "INT_RE3_H2L" 2 2169 "0x22081610"
D G "d1" 1 11 "PIN_B0"
D G "d2" 1 12 "PIN_B1"
D G "d3" 1 13 "PIN_B2"
D G "d4" 1 14 "PIN_B3"
F N "main" 0 3 ""
F G "main" 0 4 "void()" `953 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_e" 1 0
F B "set_input_level_a" 1 0
F B "set_input_level_b" 1 0
F B "set_input_level_c" 1 0
F B "set_input_level_e" 1 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_open_drain_c" 1 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "port_e_pullups" 1 0
F B "pin_select" 2 4
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "get_wdt" 0 0
F B "setup_comparator" 1 0
F B "set_analog_pins" 0 255
F B "setup_adc_reference" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 3
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_adc_trigger" 1 0
F B "adc_write" 2 0
F B "adc_read" 1 0
F B "adc_status" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 3
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer_6" 3 0
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_pwm6" 1 0
F B "set_pwm6_duty" 1 0
F B "setup_pwm7" 1 0
F B "set_pwm7_duty" 1 0
F B "setup_oscillator" 0 2
F B "pll_locked" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "setup_dac" 1 0
F B "dac_write" 1 0
F B "brownout_enable" 1 0
F B "setup_cwg" 4 0
F B "cwg_status" 0 0
F B "cwg_restart" 0 0
F B "setup_cwg2" 4 0
F B "cwg2_status" 0 0
F B "cwg2_restart" 0 0
F B "setup_cwg3" 4 0
F B "cwg3_status" 0 0
F B "cwg3_restart" 0 0
F B "setup_nco" 2 0
F B "set_nco_accumulator" 1 0
F B "get_nco_accumulator" 0 0
F B "set_nco_inc_value" 1 0
F B "get_nco_inc_value" 0 0
F B "setup_clc1" 1 0
F B "clc1_setup_gate" 2 0
F B "clc1_setup_input" 2 0
F B "setup_clc2" 1 0
F B "clc2_setup_gate" 2 0
F B "clc2_setup_input" 2 0
F B "setup_clc3" 1 0
F B "clc3_setup_gate" 2 0
F B "clc3_setup_input" 2 0
F B "setup_clc4" 1 0
F B "clc4_setup_gate" 2 0
F B "clc4_setup_input" 2 0
F B "setup_dsm" 1 3
F B "setup_zcd" 1 0
F B "zcd_status" 0 0
F B "setup_smt1" 1 2
F B "smt1_status" 0 0
F B "smt1_start" 0 0
F B "smt1_stop" 0 0
F B "smt1_update" 1 0
F B "smt1_reset_timer" 0 0
F B "smt1_read" 1 0
F B "smt1_write" 2 0
F B "setup_smt2" 1 2
F B "smt2_status" 0 0
F B "smt2_start" 0 0
F B "smt2_stop" 0 0
F B "smt2_update" 1 0
F B "smt2_reset_timer" 0 0
F B "smt2_read" 1 0
F B "smt2_write" 2 0
F B "setup_crc" F B "crc_init" 0 1
F B "crc_calc8" 1 3
F B "crc_calc" 1 3
F B "crc_calc16" 1 3
F B "crc_write" 1 2
F B "crc_read" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_write_slave" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "i2c_transfer" 3 6
F B "i2c_transfer_out" 3 4
F B "i2c_transfer_in" 3 4
F B "i2c_init" 1 2
F B "i2c_poll" 0 1
F B "i2c_speed" 1 2
